<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="componentSender" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.1.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[165.0, 140.0]">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={76, 115, 934, 632}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 522]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="0.5120000000000005">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{314.3157430959301, 195.09792877906978}">
    </property>
    <entity name="Display" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={549, 375, 466, 251}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[466, 207]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{525, 205}">
        </property>
    </entity>
    <entity name="Display2" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={810, 548, 499, 208}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[499, 164]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[795.0, 245.0]">
        </property>
    </entity>
    <entity name="Display3" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={754, 64, 499, 208}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[499, 164]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[770.0, 375.0]">
        </property>
    </entity>
    <entity name="Display4" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={208, 377, 499, 208}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[499, 164]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{235.0, 470.0}">
        </property>
    </entity>
    <entity name="JavaScript" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="exports.setup = function(){&#10;	this.input('num');&#10;	this.output('elementString');&#10;}&#10;&#10;exports.initialize = function(){&#10;	this.addInputHandler('num', function(){&#10;		//this.send('nextNumJson',JSON.stringify({value: this.get('num')}));&#10;		//var thing = {&quot;message&quot;: &quot;b&quot;};&#10;		//var thing = &quot;words!&quot;&#10;		//var thing = 26;&#10;//		var thing = this.get('num').toString();&#10;//		var thing = &quot;27&quot;;&#10;		//var thing = '{component: \&quot;27\&quot;}';&#10;		var num = this.get('num');&#10;		var body = JSON.parse(num.message);&#10;		console.log(JSON.stringify(body));&#10;		if(body.id &amp;&amp; body.id === &quot;system&quot;){&#10;			&#10;			var headString = &quot;customElements.define(\&quot;&quot;;&#10;			var tailString = &quot;\&quot;, class extends HTMLElement {\r\n      constructor() {\r\n        super();\r\n        const root = this.attachShadow({mode: \&quot;open\&quot;});\r\n        root.innerHTML = \&quot;Hello &lt;slot&gt;&lt;\/slot&gt;\&quot;;\r\n        var ws = new WebSocket(\'ws:\/\/localhost:8095\/\');\r\n        ws.onopen = function(){ ws.send(JSON.stringify({\&quot;value\&quot;:\&quot;start!\&quot;}));};\r\n        ws.onmessage = function(event) {\r\n          var response;\r\n          if(event.data instanceof Blob) {\r\n            var reader = new FileReader();\r\n            reader.onload = function(evt) {\r\n              response = JSON.parse(evt.target.result);\r\n              root.innerHTML = \&quot;Hello \&quot; + response + \&quot;&lt;slot&gt;&lt;\/slot&gt;\&quot;;\r\n              ws.send(\&quot;hi from inside\&quot; + response);\r\n            };\r\n            reader.readAsText(event.data);\r\n          } else {\r\n            response = JSON.parse(event.data);\r\n            root.innerHTML = \&quot;Hello \&quot; + response + \&quot;&lt;slot&gt;&lt;\/slot&gt;\&quot;;\r\n            ws.send(\&quot;hi from inside\&quot; + response);\r\n          }\r\n        };\r\n      }\r\n    });&quot;;&#10;			//var elementString = &quot;customElements.define(\&quot;hello-message\&quot;, class extends HTMLElement {\r\n      constructor() {\r\n        super();\r\n        const root = this.attachShadow({mode: \&quot;open\&quot;});\r\n        root.innerHTML = \&quot;Hello &lt;slot&gt;&lt;\/slot&gt;\&quot;;\r\n        var ws = new WebSocket(\'ws:\/\/localhost:8095\/\');\r\n        ws.onopen = function(){ ws.send(JSON.stringify({\&quot;value\&quot;:\&quot;start!\&quot;}));};\r\n        ws.onmessage = function(event) {\r\n          var response;\r\n          if(event.data instanceof Blob) {\r\n            var reader = new FileReader();\r\n            reader.onload = function(evt) {\r\n              response = JSON.parse(evt.target.result);\r\n              root.innerHTML = \&quot;Hello \&quot; + response + \&quot;&lt;slot&gt;&lt;\/slot&gt;\&quot;;\r\n              ws.send(\&quot;hi from inside\&quot; + response);\r\n            };\r\n            reader.readAsText(event.data);\r\n          } else {\r\n            response = JSON.parse(event.data);\r\n            root.innerHTML = \&quot;Hello \&quot; + response + \&quot;&lt;slot&gt;&lt;\/slot&gt;\&quot;;\r\n            ws.send(\&quot;hi from inside\&quot; + response);\r\n          }\r\n        };\r\n      }\r\n    });&quot;;&#10;			//var elementString = {aKey: &quot;me&quot;};&#10;			var response = {&#10;				id: &quot;system&quot;,&#10;				componentHead: headString,&#10;				componentTail: tailString&#10;			}&#10;			var webSocketFormat = {&#10;				socketID: 0,&#10;				message: response&#10;			}&#10;			this.send('elementString', JSON.stringify(response));&#10;			&#10;			//var goodbyeElementString = &quot;customElements.define(\&quot;goodbye-message\&quot;, class extends HTMLElement {\r\n      constructor() {\r\n        super();\r\n        const root = this.attachShadow({mode: \&quot;open\&quot;});\r\n        root.innerHTML = \&quot;Goodbye &lt;slot&gt;&lt;\/slot&gt;\&quot;;\r\n        var ws = new WebSocket(\'ws:\/\/localhost:8095\/\');\r\n        ws.onopen = function(){ ws.send(JSON.stringify({\&quot;value\&quot;:\&quot;start!\&quot;}));};\r\n        ws.onmessage = function(event) {\r\n          var response;\r\n          if(event.data instanceof Blob) {\r\n            var reader = new FileReader();\r\n            reader.onload = function(evt) {\r\n              response = JSON.parse(evt.target.result);\r\n              root.innerHTML = \&quot;Hello \&quot; + response + \&quot;&lt;slot&gt;&lt;\/slot&gt;\&quot;;\r\n              ws.send(\&quot;hi from inside\&quot; + response);\r\n            };\r\n            reader.readAsText(event.data);\r\n          } else {\r\n            response = JSON.parse(event.data);\r\n            root.innerHTML = \&quot;Hello \&quot; + response + \&quot;&lt;slot&gt;&lt;\/slot&gt;\&quot;;\r\n            ws.send(\&quot;hi from inside\&quot; + response);\r\n          }\r\n        };\r\n      }\r\n    });&quot;&#10;			var byeHeadString = &quot;customElements.define(\&quot;&quot;;&#10;			var byeTailString = &quot;\&quot;, class extends HTMLElement {\r\n      constructor() {\r\n        super();\r\n        const root = this.attachShadow({mode: \&quot;open\&quot;});\r\n        root.innerHTML = \&quot;Goodbye &lt;slot&gt;&lt;\/slot&gt;\&quot;;\r\n        var ws = new WebSocket(\'ws:\/\/localhost:8095\/\');\r\n        ws.onopen = function(){ ws.send(JSON.stringify({\&quot;value\&quot;:\&quot;start!\&quot;}));};\r\n        ws.onmessage = function(event) {\r\n          var response;\r\n          if(event.data instanceof Blob) {\r\n            var reader = new FileReader();\r\n            reader.onload = function(evt) {\r\n              response = JSON.parse(evt.target.result);\r\n              root.innerHTML = \&quot;Hello \&quot; + response + \&quot;&lt;slot&gt;&lt;\/slot&gt;\&quot;;\r\n              ws.send(\&quot;hi from inside\&quot; + response);\r\n            };\r\n            reader.readAsText(event.data);\r\n          } else {\r\n            response = JSON.parse(event.data);\r\n            root.innerHTML = \&quot;Hello \&quot; + response + \&quot;&lt;slot&gt;&lt;\/slot&gt;\&quot;;\r\n            ws.send(\&quot;hi from inside\&quot; + response);\r\n          }\r\n        };\r\n      }\r\n    });&quot;&#10;		&#10;			var byeResponse = {&#10;				id: &quot;system&quot;,&#10;				componentHead: byeHeadString,&#10;				componentTail: byeTailString&#10;			}&#10;			var webSocketFormat = {&#10;				socketID: 0,&#10;				message: byeResponse&#10;			}&#10;			this.send('elementString', JSON.stringify(byeResponse));&#10;			&#10;			var howHeadString = &quot;customElements.define(\&quot;&quot;;&#10;			var howTailString = &quot;\&quot;, class extends HTMLElement {\r\n      constructor() {\r\n        super();\r\n        const root = this.attachShadow({mode: \&quot;open\&quot;});\r\n        root.innerHTML = \&quot;How are you &lt;slot&gt;&lt;\/slot&gt;?\&quot;;\r\n        var ws = new WebSocket(\'ws:\/\/localhost:8095\/\');\r\n        ws.onopen = function(){ ws.send(JSON.stringify({\&quot;value\&quot;:\&quot;start!\&quot;}));};\r\n        ws.onmessage = function(event) {\r\n          var response;\r\n          if(event.data instanceof Blob) {\r\n            var reader = new FileReader();\r\n            reader.onload = function(evt) {\r\n              response = JSON.parse(evt.target.result);\r\n              root.innerHTML = \&quot;Hello \&quot; + response + \&quot;&lt;slot&gt;&lt;\/slot&gt;\&quot;;\r\n              ws.send(\&quot;hi from inside\&quot; + response);\r\n            };\r\n            reader.readAsText(event.data);\r\n          } else {\r\n            response = JSON.parse(event.data);\r\n            root.innerHTML = \&quot;Hello \&quot; + response + \&quot;&lt;slot&gt;&lt;\/slot&gt;\&quot;;\r\n            ws.send(\&quot;hi from inside\&quot; + response);\r\n          }\r\n        };\r\n      }\r\n    });&quot;&#10;		&#10;			var howResponse = {&#10;				id: &quot;system&quot;,&#10;				componentHead: howHeadString,&#10;				componentTail: howTailString&#10;			}&#10;			var webSocketFormat = {&#10;				socketID: 0,&#10;				message: howResponse&#10;			}&#10;			this.send('elementString', JSON.stringify(howResponse));&#10;			&#10;			&#10;			var accordHeadString = &quot;customElements.define(\&quot;&quot;;&#10;			var accordTailString = &quot;\&quot;, class extends HTMLElement {\r\n      constructor() {\r\n        super();\r\n        const root = this.attachShadow({mode: \&quot;open\&quot;});\r\n        var ws = new WebSocket(\'ws:\/\/localhost:8095\/\');\r\n        ws.onopen = function(){ ws.send(JSON.stringify({\&quot;value\&quot;:\&quot;start!\&quot;}));};\r\n        if(customElements.get(\'b-accordion\') == undefined){\r\n          console.log(\&quot;b-accordian is undefined!\&quot;;\r\n        }\r\n        root.innerHTML = `\r\n            &lt;b-accordion target=\&quot;.collapsible-toggle\&quot; selected=\&quot;0\&quot;&gt;\r\n            &lt;button class=\&quot;collapsible-toggle\&quot;&gt;Greeting&lt;\/button&gt;\r\n            &lt;b-collapsible&gt;\r\n                &lt;div class=\&quot;collapsible-content\&quot;&gt;\r\n                    \&quot;Hi &lt;slot&gt;&lt;\/slot&gt;\&quot;\r\n                &lt;\/div&gt;\r\n            &lt;\/b-collapsible&gt;\r\n            &lt;button class=\&quot;collapsible-toggle\&quot;&gt;Farewell&lt;\/button&gt;\r\n            &lt;b-collapsible&gt;\r\n                &lt;div class=\&quot;collapsible-content\&quot;&gt;\r\n                    \&quot;Goodbye\&quot;\r\n                &lt;\/div&gt;\r\n            &lt;\/b-collapsible&gt;\r\n            &lt;button class=\&quot;collapsible-toggle\&quot;&gt;Question&lt;\/button&gt;\r\n            &lt;b-collapsible&gt;\r\n                &lt;div class=\&quot;collapsible-content\&quot;&gt;\r\n                    \&quot;How are you?\&quot;\r\n                &lt;\/div&gt;\r\n            &lt;\/b-collapsible&gt;\r\n        &lt;\/b-accordion&gt;\r\n        `;\r\n      }\r\n    });&quot;&#10;			var accordResponse = {&#10;				id: &quot;system&quot;,&#10;				componentHead: accordHeadString,&#10;				componentTail: accordTailString&#10;			}&#10;			var accordSocketFormat = {&#10;				socketID: 0,&#10;				message: accordResponse&#10;			}&#10;			this.send('elementString', JSON.stringify(accordResponse));&#10;		}&#10;		&#10;		//this.send('elementString', JSON.stringify(webSocketFormat));&#10;		&#10;		&#10;		//this.send('elementString', webSocketFormat);&#10;		&#10;		&#10;		//console.log(JSON.(response)));&#10;		&#10;		//this.send('elementString', JSON.stringify(thing));&#10;		&#10;		&#10;		//this.send('nextNumJson',JSON.parse('{ &quot;value&quot;: ' + this.get(&quot;num&quot;).toString() + '}'));&#10;	});&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[180.0, 315.0]">
        </property>
        <port name="num" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="elementString" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
    </entity>
    <entity name="WebSocketServer2" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2016-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** This accessor starts a server that listens for web socket&#10; *  connection requests on the specified hostInterface and port.  The&#10; *  hostInterface is needed only if the host machine has more than one&#10; *  network interface (e.g. Ethernet and WiFi) and 'localhost' does&#10; *  not resolve to the desired interface.&#10; *&#10; *  The output `connection` reports when a&#10; *  connection is opened or closed.&#10; *  The output is an object with two fields, a 'socketID',&#10; *  which is a unique ID for this client connection, and a 'status' field,&#10; *  which is the string 'open' or 'closed'.&#10; *&#10; *  When a message arrives on a connection, a `received`&#10; *  output is produced with that message. Note that the message may arrive in&#10; *  multiple frames, but it will be produced on this port as a single message.&#10; *  The output is an object with two fields,&#10; *  a 'socketID', which is a unique ID for this client connection, and a 'message' field,&#10; *  which is the message received from the client.&#10; *&#10; *  When an input arrives on `toSend`, then a message is&#10; *  sent to one or all of the open socket connections.&#10; *  If this is an object with 'socketID' field and a 'message' field,&#10; *  then send the value of the message field to the socket identified&#10; *  by the socketID field. If the input has any other form, then the&#10; *  message is broadcast to all open socket connections.&#10; *&#10; *  When `wrapup()` is invoked, this accessor closes the&#10; *  server and all connections.&#10; *&#10; *  The default type for both sending and receiving&#10; *  is 'application/json', which allows sending and receiving anything that has&#10; *  a string representation in JSON. The types supported by this implementation&#10; *  include at least:&#10; *  * __application/json__: The this.send() function uses JSON.stringify() and sends the&#10; *    result with a UTF-8 encoding. An incoming byte stream will be parsed as JSON,&#10; *    and if the parsing fails, will be provided as a string interpretation of the byte&#10; *    stream.&#10; *  * __text/\*__: Any text type is sent as a string encoded in UTF-8.&#10; *  * __image/x__: Where __x__ is one of __json__, __png__, __gif__,&#10; *    and more.&#10; *    In this case, the data passed to this.send() is assumed to be an image, as encoded&#10; *    on the host, and the image will be encoded as a byte stream in the specified&#10; *    format before sending.  A received byte stream will be decoded as an image,&#10; *    if possible.&#10; *&#10; *  This accessor requires the module webSocket.&#10; *&#10; *  @accessor net/WebSocketServer&#10; *  @parameter {string} hostInterface The IP address or domain name of the&#10; *    network interface to listen to.&#10; *  @parameter {int} port The port to listen to for connections.&#10; *  @parameter {string} pfxKeyCertPassword If sslTls is set to true, then this option needs&#10; *   to specify the password for the pfx key-cert file specified by pfxKeyCertPath.&#10; *  @parameter {string} pfxKeyCertPath If sslTls is set to true, then this option needs to&#10; *   specify the fully qualified filename for the file that stores the private key and certificate&#10; *   that this server will use to identify itself. This path can be any of those understood by the&#10; *   Ptolemy host, e.g. paths beginning with $CLASSPATH/.&#10; *  @parameter {string} receiveType The MIME type for incoming messages,&#10; *    which defaults to 'application/json'.&#10; *  @parameter {string} sendType The MIME type for outgoing messages,&#10; *    which defaults to 'application/json'.&#10; *  @parameter {boolean} sslTls Whether SSL/TLS is enabled. This defaults to false.&#10; *  @input toSend The data to be sent to open sockets.&#10; *    If this is an object with 'socketID' field and a 'message' field,&#10; *    then send the value of the message field to the socket identified&#10; *    by the socketID field. If the input has any other form, then the&#10; *    message is broadcast to all open socket connections.&#10; *  @output {int} listening When the server is listening for connections, this output&#10; *    will produce the port number that the server is listening on&#10; *  @output connection An output produced when a connection opens or closes.&#10; *    The output is an object with two fields, a 'socketID',&#10; *    which is a unique ID for this client connection, and a 'status' field,&#10; *    which is the string 'open' or 'closed'.&#10; *  @output received A message received a client in the form of an object with two fields,&#10; *    a 'socketID', which is a unique ID for this client connection, and a 'message' field,&#10; *    which is the message received from the client.&#10; *  @author Hokeun Kim, Edward Lee&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals console, error, exports, require */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;/*jslint plusplus: true */&#10;&#10;var WebSocket = require('@accessors-modules/web-socket-server');&#10;var server = null;&#10;var running = false;&#10;var debug = false;&#10;&#10;/** Sets up the accessor by defining inputs and outputs. */&#10;exports.setup = function () {&#10;    this.parameter('hostInterface', {&#10;        value: &quot;localhost&quot;,&#10;        type: &quot;string&quot;&#10;    });&#10;    this.parameter('port', {&#10;        value: 8080,&#10;        type: &quot;int&quot;&#10;    });&#10;    this.parameter('pfxKeyCertPassword', {&#10;        value: '',&#10;        type: 'string'&#10;    });&#10;    this.parameter('pfxKeyCertPath', {&#10;        value: '',&#10;        type: 'string'&#10;    });&#10;    this.parameter('receiveType', {&#10;        type: 'string',&#10;        value: 'application/json'&#10;    });&#10;    this.parameter('sendType', {&#10;        type: 'string',&#10;        value: 'application/json'&#10;    });&#10;    this.parameter('sslTls', {&#10;        type: 'boolean',&#10;        value: false&#10;    });&#10;    this.input('toSend');&#10;    this.output('received', {&#10;        'spontaneous': true        &#10;    });&#10;    this.output('listening', {&#10;        'type': 'int',&#10;        'spontaneous': true&#10;    });&#10;    this.output('connection', {&#10;        'spontaneous': true&#10;    });&#10;&#10;    // Attempt to add a list of options for types, but do not error out&#10;    // if the socket module is not supported by the host.&#10;    try {&#10;        this.parameter('receiveType', {&#10;            options: WebSocket.supportedReceiveTypes()&#10;        });&#10;        this.parameter('sendType', {&#10;            options: WebSocket.supportedSendTypes()&#10;        });&#10;    } catch (err) {&#10;        error(err);&#10;    }&#10;};&#10;&#10;//var sockets = [];&#10;&#10;/** Starts the web socket and attaches functions to inputs and outputs.&#10; * Adds an input handler on toSend that sends the input received to the right socket. */&#10;exports.initialize = function () {&#10;    var self = this;&#10;    self.sockets = [];&#10;&#10;    if (!server) {&#10;        server = new WebSocket.Server({&#10;            'port': this.getParameter('port'),&#10;            'hostInterface': this.getParameter('hostInterface'),&#10;            'pfxKeyCertPassword': this.getParameter('pfxKeyCertPassword'),&#10;            'pfxKeyCertPath': this.getParameter('pfxKeyCertPath'),&#10;            'receiveType': this.getParameter('receiveType'),&#10;            'sendType': this.getParameter('sendType'),&#10;            'sslTls': this.getParameter('sslTls')&#10;        });&#10;        // Using 'this.exports' rather than just 'exports' in the following allows&#10;        // these functions to be overridden in derived accessors.&#10;        server.on('listening', this.exports.onListening.bind(this));&#10;        server.on('connection', this.exports.onConnection.bind(this));&#10;        server.on('error', function (message) {&#10;            self.error(message);&#10;        });&#10;        server.start();&#10;    }&#10;    running = true;&#10;&#10;    this.addInputHandler('toSend', function () {&#10;        var data = self.get('toSend'),&#10;            id;&#10;        // Careful: Don't do if (data) because if data === 0, then data is false.&#10;        if (data !== null) {&#10;&#10;            // JSHint WARNING: Do not change dataSocketID != null to&#10;            // data.socketID !== null because it will cause&#10;            // org/terraswarm/accessor/test/auto/WebSocketClient.xml&#10;            // to fail upon reloading.  See&#10;            // org/terraswarm/accessor/test/WebSocketClientTest.tcl&#10;            if ((data.socketID != null) &amp;&amp; (data.message !== null)) {&#10;                // data has the right form for a point-to-point send.&#10;                if (self.sockets[data.socketID] &amp;&amp; self.sockets[data.socketID].isOpen()) {&#10;                    // id matches this socket.&#10;                    /*&#10;                      console.log(self.accessorName + ': WebSocketServer: Sending to socket id ' +&#10;                      data.socketID +&#10;                      &quot; message: &quot; +&#10;                      data.message);&#10;                    */&#10;                    self.sockets[data.socketID].send(data.message);&#10;                } else {&#10;                    console.log(self.accessorName + ': WebSocketServer.js: Socket with ID ' + data.socketID +&#10;                        ' is not open. Discarding message.');&#10;                }&#10;            } else {&#10;                // No socketID or message, so this is a broadcast message.&#10;                // var success = false;&#10;                for (id = 0; id &lt; self.sockets.length; id += 1) {&#10;                    if (self.sockets[id].isOpen()) {&#10;                        // console.log(self.accessorName + 'WebSocketServer.js: Broadcasting to socket id ' + id&#10;                        //         + ' message: ' + data);&#10;                        self.sockets[id].send(data);&#10;                        // success = true;&#10;                    }&#10;                }&#10;                // if (!success) {&#10;                //     console.log(self.accessorName + 'WebSocketServer.js: No open sockets. Discarding message: ' + data.message);&#10;                // }&#10;            }&#10;        }&#10;    });&#10;};&#10;&#10;exports.onListening = function () {&#10;    if (debug) {&#10;        console.log(this.accessorName + 'WebSocketServer.js: Listening for socket connection requests.');&#10;    }&#10;    this.send('listening', this.getParameter('port'));&#10;};&#10;&#10;/** Executes when a connection has been established.&lt;br&gt;&#10; *  Triggers an output on &lt;code&gt;'connection'&lt;/code&gt;.&#10; *  Adds an event listener to the socket. */&#10;exports.onConnection = function (socket) {&#10;    // socketID is the index of the socket in the sockets array.&#10;    var self = this,&#10;        socketID = self.sockets.length;&#10;    if (debug) {&#10;        console.log(this.accessorName + 'WebSocketServer.js: new socket established with ID: ' + socketID);&#10;    }&#10;    this.send('connection', {&#10;        'socketID': socketID,&#10;        'status': 'open'&#10;    });&#10;&#10;    self.sockets.push(socket);&#10;&#10;    self.sockets[socketID].on('message', function (message) {&#10;        console.log('WebSocketServer message(): ' + message + ', typeof message: ' + typeof message);&#10;        // For some reason, under the Node Host, the message is an&#10;        // object.  Under CapeCode, it is a string?&#10;        var isObjectWithQuotes = (typeof message === 'object' &amp;&amp; message.toString().startsWith('&quot;') &amp;&amp; message.toString().endsWith('&quot;'));&#10;        // If message is a string, strip leading and trailing &quot;&#10;        if (typeof message === 'string' || isObjectWithQuotes) {&#10;            if (isObjectWithQuotes) {&#10;                message = message.toString();&#10;            }&#10;            message = message.replace(/^&quot;(.*)&quot;$/, '$1');&#10;        }&#10;        self.send('received', {&#10;            'message': message,&#10;            'socketID': socketID&#10;        });&#10;    });&#10;    self.sockets[socketID].on('close', function () {&#10;        self.send('connection', {&#10;            'socketID': socketID,&#10;            'status': 'closed'&#10;        });&#10;    });&#10;    self.sockets[socketID].on('error', function (message) {&#10;        console.log(self.accessorName + ': WebSocketServer.js: error ' + message);&#10;        self.error(message);&#10;    });&#10;&#10;&#10;};&#10;&#10;/** Removes all inputHandlers from sockets.&lt;br&gt;&#10; * Unregisters event listeners from sockets.&lt;br&gt;&#10; * Closes server.&#10; */&#10;exports.wrapup = function () {&#10;    this.sockets = [];&#10;&#10;    if (server !== null) {&#10;        server.stop();&#10;        server = null;&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/net/WebSocketServer.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor starts a server that listens for web socket&#10; connection requests on the specified hostInterface and port.  The&#10; hostInterface is needed only if the host machine has more than one&#10; network interface (e.g. Ethernet and WiFi) and 'localhost' does&#10; not resolve to the desired interface.&lt;/p&gt;&#10;&lt;p&gt; The output &lt;code&gt;connection&lt;/code&gt; reports when a&#10; connection is opened or closed.&#10; The output is an object with two fields, a 'socketID',&#10; which is a unique ID for this client connection, and a 'status' field,&#10; which is the string 'open' or 'closed'.&lt;/p&gt;&#10;&lt;p&gt; When a message arrives on a connection, a &lt;code&gt;received&lt;/code&gt;&#10; output is produced with that message. Note that the message may arrive in&#10; multiple frames, but it will be produced on this port as a single message.&#10; The output is an object with two fields,&#10; a 'socketID', which is a unique ID for this client connection, and a 'message' field,&#10; which is the message received from the client.&lt;/p&gt;&#10;&lt;p&gt; When an input arrives on &lt;code&gt;toSend&lt;/code&gt;, then a message is&#10; sent to one or all of the open socket connections.&#10; If this is an object with 'socketID' field and a 'message' field,&#10; then send the value of the message field to the socket identified&#10; by the socketID field. If the input has any other form, then the&#10; message is broadcast to all open socket connections.&lt;/p&gt;&#10;&lt;p&gt; When &lt;code&gt;wrapup()&lt;/code&gt; is invoked, this accessor closes the&#10; server and all connections.&lt;/p&gt;&#10;&lt;p&gt; The default type for both sending and receiving&#10; is 'application/json', which allows sending and receiving anything that has&#10; a string representation in JSON. The types supported by this implementation&#10; include at least:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;strong&gt;application/json&lt;/strong&gt;: The this.send() function uses JSON.stringify() and sends the&#10;result with a UTF-8 encoding. An incoming byte stream will be parsed as JSON,&#10;and if the parsing fails, will be provided as a string interpretation of the byte&#10;stream.&lt;/li&gt;&#10;&lt;li&gt;&lt;strong&gt;text/*&lt;/strong&gt;: Any text type is sent as a string encoded in UTF-8.&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;&lt;strong&gt;image/x&lt;/strong&gt;: Where &lt;strong&gt;x&lt;/strong&gt; is one of &lt;strong&gt;json&lt;/strong&gt;, &lt;strong&gt;png&lt;/strong&gt;, &lt;strong&gt;gif&lt;/strong&gt;,&#10;and more.&#10;In this case, the data passed to this.send() is assumed to be an image, as encoded&#10;on the host, and the image will be encoded as a byte stream in the specified&#10;format before sending.  A received byte stream will be decoded as an image,&#10;if possible.&lt;/p&gt;&#10;&lt;p&gt;This accessor requires the module webSocket.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;/ul&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Hokeun Kim, Edward Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="toSend (port)" class="ptolemy.kernel.util.StringAttribute" value="The data to be sent to open sockets.&#10;   If this is an object with 'socketID' field and a 'message' field,&#10;   then send the value of the message field to the socket identified&#10;   by the socketID field. If the input has any other form, then the&#10;   message is broadcast to all open socket connections.">
            </property>
            <property name="listening (port)" class="ptolemy.kernel.util.StringAttribute" value="When the server is listening for connections, this output&#10;   will produce the port number that the server is listening on">
            </property>
            <property name="connection (port)" class="ptolemy.kernel.util.StringAttribute" value="An output produced when a connection opens or closes.&#10;   The output is an object with two fields, a 'socketID',&#10;   which is a unique ID for this client connection, and a 'status' field,&#10;   which is the string 'open' or 'closed'.">
            </property>
            <property name="received (port)" class="ptolemy.kernel.util.StringAttribute" value="A message received a client in the form of an object with two fields,&#10;   a 'socketID', which is a unique ID for this client connection, and a 'message' field,&#10;   which is the message received from the client.">
            </property>
            <property name="hostInterface (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The IP address or domain name of the&#10;   network interface to listen to.">
            </property>
            <property name="port (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The port to listen to for connections.">
            </property>
            <property name="pfxKeyCertPassword (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If sslTls is set to true, then this option needs&#10;  to specify the password for the pfx key-cert file specified by pfxKeyCertPath.">
            </property>
            <property name="pfxKeyCertPath (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If sslTls is set to true, then this option needs to&#10;  specify the fully qualified filename for the file that stores the private key and certificate&#10;  that this server will use to identify itself. This path can be any of those understood by the&#10;  Ptolemy host, e.g. paths beginning with $CLASSPATH/.">
            </property>
            <property name="receiveType (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The MIME type for incoming messages,&#10;   which defaults to 'application/json'.">
            </property>
            <property name="sendType (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The MIME type for outgoing messages,&#10;   which defaults to 'application/json'.">
            </property>
            <property name="sslTls (parameter)" class="ptolemy.kernel.util.StringAttribute" value="Whether SSL/TLS is enabled. This defaults to false.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="hostInterface" class="ptolemy.data.expr.Parameter" value="localhost">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="pfxKeyCertPassword" class="ptolemy.data.expr.Parameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="pfxKeyCertPath" class="ptolemy.data.expr.Parameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="receiveType" class="ptolemy.data.expr.Parameter" value="text/plain">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="sendType" class="ptolemy.data.expr.Parameter" value="text/plain">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[545.0, 310.0]">
        </property>
        <property name="port" class="ptolemy.data.expr.Parameter" value="8095">
        </property>
        <port name="toSend" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="received" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_spontaneous" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="listening" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_spontaneous" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="connection" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_spontaneous" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[370.0, 235.0]">
        </vertex>
    </relation>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[310.0, 315.0]">
        </vertex>
    </relation>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[165.0, 390.0]">
        </vertex>
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="Display.input" relation="relation4"/>
    <link port="Display2.input" relation="relation2"/>
    <link port="Display3.input" relation="relation"/>
    <link port="Display4.input" relation="relation6"/>
    <link port="JavaScript.num" relation="relation4"/>
    <link port="JavaScript.elementString" relation="relation6"/>
    <link port="WebSocketServer2.toSend" relation="relation6"/>
    <link port="WebSocketServer2.received" relation="relation4"/>
    <link port="WebSocketServer2.listening" relation="relation2"/>
    <link port="WebSocketServer2.connection" relation="relation"/>
</entity>
