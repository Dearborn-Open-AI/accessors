<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="componentDemoWithParallel" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.1.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{70.0, 30.0}">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={67, 25, 1853, 1055}, maximized=true}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[1639, 936]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0510783200908058">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{284.16846652267816, 382.5}">
    </property>
    <property name="ShowTypes" class="ptolemy.vergil.actor.lib.ShowTypes">
        <property name="_location" class="ptolemy.kernel.util.Location" value="{270, -45}">
        </property>
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 0.0, 1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="FIXME Have this component set videoSourceParameter">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-95.0, 90.0]">
        </property>
    </property>
    <entity name="GetResource" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Accessor that gets a resource&#10;//&#10;// Copyright (c) 2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** Get a resource, which may be a relative file name or a URL, and return the&#10; *  value of the resource as a string.&#10; *&#10; *  Implementations of this function may restrict the locations from which&#10; *  resources can be retrieved. This implementation restricts relative file&#10; *  names to be in the same directory where the swarmlet model is located or&#10; *  in a subdirectory, or if the resource begins with &quot;$CLASSPATH/&quot;, to the&#10; *  classpath of the current Java process.&#10; *&#10; *  If the accessor is not restricted, the $KEYSTORE is resolved to&#10; *  $HOME/.ptKeystore.&#10; *&#10; *  The options parameter may have the following values:&#10; *  * If the type of the options parameter is a Number, then it is assumed&#10; *    to be the timeout in milliseconds.&#10; *  * If the type of the options parameter is a String, then it is assumed&#10; *    to be the encoding, for example &quot;UTF-8&quot;.  If the value is &quot;Raw&quot; or &quot;raw&quot;&#10; *    then the data is returned as an unsigned array of bytes.&#10; *    The default encoding is the default encoding of the system.&#10; *    In CapeCode, the default encoding is returned by Charset.defaultCharset().&#10; *  * If the type of the options parameter is an Object, then it may&#10; *    have the following fields:&#10; *  ** encoding {string} The encoding of the file, see above for values.&#10; *  ** timeout {number} The timeout in milliseconds.&#10; *&#10; *  If the callback parameter is not present, then getResource() will&#10; *  be synchronous read like Node.js's&#10; *  {@link https://nodejs.org/api/fs.html#fs_fs_readfilesync_path_options|fs.readFileSync()}.&#10; *  If the callback argument is present, then getResource() will be asynchronous like&#10; *  {@link https://nodejs.org/api/fs.html#fs_fs_readfile_path_options_callback|fs.readFile()}.&#10;&#10; *  @accessor util/GetResource&#10; *  @input options Options passed to the getResources() function, see above&#10; *  for details.&#10; *  @input resource {string} The file or URL to be read.  Defaults to&#10; *  the Accessors home page (http://accessors.org).&#10; *  @input trigger {boolean} Send a token to this input to read the&#10; *  file or URL.&#10; *  @output output The contents of the file or URL.&#10; *  @author Edward A. Lee&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals clearInterval, exports, require, setInterval */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;exports.setup = function () {&#10;    this.input('options', {&#10;        'type': 'JSON',&#10;        'value': ''&#10;    });&#10;    this.input('resource', {&#10;        'type': 'string',&#10;        'value': 'http://accessors.org'&#10;    });&#10;    this.input('trigger');&#10;&#10;    this.output('output');&#10;};&#10;exports.initialize = function () {&#10;    var self = this;&#10;    this.addInputHandler('trigger', function () {&#10;        var resourceValue = this.get('resource');&#10;        var resourceContents = getResource(this.get('resource'), this.get('options'), null);&#10;        self.send('output', resourceContents);&#10;    });&#10;};&#10;&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/utilities/GetResource.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Get a resource, which may be a relative file name or a URL, and return the&#10; value of the resource as a string.&lt;/p&gt;&#10;&lt;p&gt; Implementations of this function may restrict the locations from which&#10; resources can be retrieved. This implementation restricts relative file&#10; names to be in the same directory where the swarmlet model is located or&#10; in a subdirectory, or if the resource begins with &amp;quot;$CLASSPATH/&amp;quot;, to the&#10; classpath of the current Java process.&lt;/p&gt;&#10;&lt;p&gt; If the accessor is not restricted, the $KEYSTORE is resolved to&#10; $HOME/.ptKeystore.&lt;/p&gt;&#10;&lt;p&gt; The options parameter may have the following values:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;If the type of the options parameter is a Number, then it is assumed&#10;to be the timeout in milliseconds.&lt;/li&gt;&#10;&lt;li&gt;If the type of the options parameter is a String, then it is assumed&#10;to be the encoding, for example &amp;quot;UTF-8&amp;quot;.  If the value is &amp;quot;Raw&amp;quot; or &amp;quot;raw&amp;quot;&#10;then the data is returned as an unsigned array of bytes.&#10;The default encoding is the default encoding of the system.&#10;In CapeCode, the default encoding is returned by Charset.defaultCharset().&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;If the type of the options parameter is an Object, then it may&#10;have the following fields:&#10;&lt;strong&gt; encoding {string} The encoding of the file, see above for values.&#10;&lt;/strong&gt; timeout {number} The timeout in milliseconds.&lt;/p&gt;&#10;&lt;p&gt;If the callback parameter is not present, then getResource() will&#10;be synchronous read like Node.js's&#10;{@link https://nodejs.org/api/fs.html#fs_fs_readfilesync_path_options|fs.readFileSync()}.&#10;If the callback argument is present, then getResource() will be asynchronous like&#10;{@link https://nodejs.org/api/fs.html#fs_fs_readfile_path_options_callback|fs.readFile()}.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;/ul&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="options (port)" class="ptolemy.kernel.util.StringAttribute" value="Options passed to the getResources() function, see above&#10; for details.">
            </property>
            <property name="resource (port)" class="ptolemy.kernel.util.StringAttribute" value="The file or URL to be read.  Defaults to&#10; the Accessors home page (http://accessors.org).">
            </property>
            <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="Send a token to this input to read the&#10; file or URL.">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="The contents of the file or URL.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="options" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="resource" class="ptolemy.actor.parameters.PortParameter" value="VideoComponent.js">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[175.0, 170.0]">
        </property>
        <port name="options" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="resource" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="Merge" class="ptolemy.domains.de.lib.Merge">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[560.0, 210.0]">
        </property>
    </entity>
    <entity name="GetResource2" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Accessor that gets a resource&#10;//&#10;// Copyright (c) 2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** Get a resource, which may be a relative file name or a URL, and return the&#10; *  value of the resource as a string.&#10; *&#10; *  Implementations of this function may restrict the locations from which&#10; *  resources can be retrieved. This implementation restricts relative file&#10; *  names to be in the same directory where the swarmlet model is located or&#10; *  in a subdirectory, or if the resource begins with &quot;$CLASSPATH/&quot;, to the&#10; *  classpath of the current Java process.&#10; *&#10; *  If the accessor is not restricted, the $KEYSTORE is resolved to&#10; *  $HOME/.ptKeystore.&#10; *&#10; *  The options parameter may have the following values:&#10; *  * If the type of the options parameter is a Number, then it is assumed&#10; *    to be the timeout in milliseconds.&#10; *  * If the type of the options parameter is a String, then it is assumed&#10; *    to be the encoding, for example &quot;UTF-8&quot;.  If the value is &quot;Raw&quot; or &quot;raw&quot;&#10; *    then the data is returned as an unsigned array of bytes.&#10; *    The default encoding is the default encoding of the system.&#10; *    In CapeCode, the default encoding is returned by Charset.defaultCharset().&#10; *  * If the type of the options parameter is an Object, then it may&#10; *    have the following fields:&#10; *  ** encoding {string} The encoding of the file, see above for values.&#10; *  ** timeout {number} The timeout in milliseconds.&#10; *&#10; *  If the callback parameter is not present, then getResource() will&#10; *  be synchronous read like Node.js's&#10; *  {@link https://nodejs.org/api/fs.html#fs_fs_readfilesync_path_options|fs.readFileSync()}.&#10; *  If the callback argument is present, then getResource() will be asynchronous like&#10; *  {@link https://nodejs.org/api/fs.html#fs_fs_readfile_path_options_callback|fs.readFile()}.&#10;&#10; *  @accessor util/GetResource&#10; *  @input options Options passed to the getResources() function, see above&#10; *  for details.&#10; *  @input resource {string} The file or URL to be read.  Defaults to&#10; *  the Accessors home page (http://accessors.org).&#10; *  @input trigger {boolean} Send a token to this input to read the&#10; *  file or URL.&#10; *  @output output The contents of the file or URL.&#10; *  @author Edward A. Lee&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals clearInterval, exports, require, setInterval */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;exports.setup = function () {&#10;    this.input('options', {&#10;        'type': 'JSON',&#10;        'value': ''&#10;    });&#10;    this.input('resource', {&#10;        'type': 'string',&#10;        'value': 'http://accessors.org'&#10;    });&#10;    this.input('trigger');&#10;&#10;    this.output('output');&#10;};&#10;exports.initialize = function () {&#10;    var self = this;&#10;    this.addInputHandler('trigger', function () {&#10;        var resourceValue = this.get('resource');&#10;        var resourceContents = getResource(this.get('resource'), this.get('options'), null);&#10;        self.send('output', resourceContents);&#10;    });&#10;};&#10;&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/utilities/GetResource.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Get a resource, which may be a relative file name or a URL, and return the&#10; value of the resource as a string.&lt;/p&gt;&#10;&lt;p&gt; Implementations of this function may restrict the locations from which&#10; resources can be retrieved. This implementation restricts relative file&#10; names to be in the same directory where the swarmlet model is located or&#10; in a subdirectory, or if the resource begins with &amp;quot;$CLASSPATH/&amp;quot;, to the&#10; classpath of the current Java process.&lt;/p&gt;&#10;&lt;p&gt; If the accessor is not restricted, the $KEYSTORE is resolved to&#10; $HOME/.ptKeystore.&lt;/p&gt;&#10;&lt;p&gt; The options parameter may have the following values:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;If the type of the options parameter is a Number, then it is assumed&#10;to be the timeout in milliseconds.&lt;/li&gt;&#10;&lt;li&gt;If the type of the options parameter is a String, then it is assumed&#10;to be the encoding, for example &amp;quot;UTF-8&amp;quot;.  If the value is &amp;quot;Raw&amp;quot; or &amp;quot;raw&amp;quot;&#10;then the data is returned as an unsigned array of bytes.&#10;The default encoding is the default encoding of the system.&#10;In CapeCode, the default encoding is returned by Charset.defaultCharset().&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;If the type of the options parameter is an Object, then it may&#10;have the following fields:&#10;&lt;strong&gt; encoding {string} The encoding of the file, see above for values.&#10;&lt;/strong&gt; timeout {number} The timeout in milliseconds.&lt;/p&gt;&#10;&lt;p&gt;If the callback parameter is not present, then getResource() will&#10;be synchronous read like Node.js's&#10;{@link https://nodejs.org/api/fs.html#fs_fs_readfilesync_path_options|fs.readFileSync()}.&#10;If the callback argument is present, then getResource() will be asynchronous like&#10;{@link https://nodejs.org/api/fs.html#fs_fs_readfile_path_options_callback|fs.readFile()}.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;/ul&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="options (port)" class="ptolemy.kernel.util.StringAttribute" value="Options passed to the getResources() function, see above&#10; for details.">
            </property>
            <property name="resource (port)" class="ptolemy.kernel.util.StringAttribute" value="The file or URL to be read.  Defaults to&#10; the Accessors home page (http://accessors.org).">
            </property>
            <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="Send a token to this input to read the&#10; file or URL.">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="The contents of the file or URL.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="options" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="resource" class="ptolemy.actor.parameters.PortParameter" value="GraphComponent.js">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[175.0, 235.0]">
        </property>
        <port name="options" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="resource" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="GetResource3" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Accessor that gets a resource&#10;//&#10;// Copyright (c) 2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** Get a resource, which may be a relative file name or a URL, and return the&#10; *  value of the resource as a string.&#10; *&#10; *  Implementations of this function may restrict the locations from which&#10; *  resources can be retrieved. This implementation restricts relative file&#10; *  names to be in the same directory where the swarmlet model is located or&#10; *  in a subdirectory, or if the resource begins with &quot;$CLASSPATH/&quot;, to the&#10; *  classpath of the current Java process.&#10; *&#10; *  If the accessor is not restricted, the $KEYSTORE is resolved to&#10; *  $HOME/.ptKeystore.&#10; *&#10; *  The options parameter may have the following values:&#10; *  * If the type of the options parameter is a Number, then it is assumed&#10; *    to be the timeout in milliseconds.&#10; *  * If the type of the options parameter is a String, then it is assumed&#10; *    to be the encoding, for example &quot;UTF-8&quot;.  If the value is &quot;Raw&quot; or &quot;raw&quot;&#10; *    then the data is returned as an unsigned array of bytes.&#10; *    The default encoding is the default encoding of the system.&#10; *    In CapeCode, the default encoding is returned by Charset.defaultCharset().&#10; *  * If the type of the options parameter is an Object, then it may&#10; *    have the following fields:&#10; *  ** encoding {string} The encoding of the file, see above for values.&#10; *  ** timeout {number} The timeout in milliseconds.&#10; *&#10; *  If the callback parameter is not present, then getResource() will&#10; *  be synchronous read like Node.js's&#10; *  {@link https://nodejs.org/api/fs.html#fs_fs_readfilesync_path_options|fs.readFileSync()}.&#10; *  If the callback argument is present, then getResource() will be asynchronous like&#10; *  {@link https://nodejs.org/api/fs.html#fs_fs_readfile_path_options_callback|fs.readFile()}.&#10;&#10; *  @accessor util/GetResource&#10; *  @input options Options passed to the getResources() function, see above&#10; *  for details.&#10; *  @input resource {string} The file or URL to be read.  Defaults to&#10; *  the Accessors home page (http://accessors.org).&#10; *  @input trigger {boolean} Send a token to this input to read the&#10; *  file or URL.&#10; *  @output output The contents of the file or URL.&#10; *  @author Edward A. Lee&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals clearInterval, exports, require, setInterval */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;exports.setup = function () {&#10;    this.input('options', {&#10;        'type': 'JSON',&#10;        'value': ''&#10;    });&#10;    this.input('resource', {&#10;        'type': 'string',&#10;        'value': 'http://accessors.org'&#10;    });&#10;    this.input('trigger');&#10;&#10;    this.output('output');&#10;};&#10;exports.initialize = function () {&#10;    var self = this;&#10;    this.addInputHandler('trigger', function () {&#10;        var resourceValue = this.get('resource');&#10;        var resourceContents = getResource(this.get('resource'), this.get('options'), null);&#10;        self.send('output', resourceContents);&#10;    });&#10;};&#10;&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/utilities/GetResource.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Get a resource, which may be a relative file name or a URL, and return the&#10; value of the resource as a string.&lt;/p&gt;&#10;&lt;p&gt; Implementations of this function may restrict the locations from which&#10; resources can be retrieved. This implementation restricts relative file&#10; names to be in the same directory where the swarmlet model is located or&#10; in a subdirectory, or if the resource begins with &amp;quot;$CLASSPATH/&amp;quot;, to the&#10; classpath of the current Java process.&lt;/p&gt;&#10;&lt;p&gt; If the accessor is not restricted, the $KEYSTORE is resolved to&#10; $HOME/.ptKeystore.&lt;/p&gt;&#10;&lt;p&gt; The options parameter may have the following values:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;If the type of the options parameter is a Number, then it is assumed&#10;to be the timeout in milliseconds.&lt;/li&gt;&#10;&lt;li&gt;If the type of the options parameter is a String, then it is assumed&#10;to be the encoding, for example &amp;quot;UTF-8&amp;quot;.  If the value is &amp;quot;Raw&amp;quot; or &amp;quot;raw&amp;quot;&#10;then the data is returned as an unsigned array of bytes.&#10;The default encoding is the default encoding of the system.&#10;In CapeCode, the default encoding is returned by Charset.defaultCharset().&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;If the type of the options parameter is an Object, then it may&#10;have the following fields:&#10;&lt;strong&gt; encoding {string} The encoding of the file, see above for values.&#10;&lt;/strong&gt; timeout {number} The timeout in milliseconds.&lt;/p&gt;&#10;&lt;p&gt;If the callback parameter is not present, then getResource() will&#10;be synchronous read like Node.js's&#10;{@link https://nodejs.org/api/fs.html#fs_fs_readfilesync_path_options|fs.readFileSync()}.&#10;If the callback argument is present, then getResource() will be asynchronous like&#10;{@link https://nodejs.org/api/fs.html#fs_fs_readfile_path_options_callback|fs.readFile()}.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;/ul&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="options (port)" class="ptolemy.kernel.util.StringAttribute" value="Options passed to the getResources() function, see above&#10; for details.">
            </property>
            <property name="resource (port)" class="ptolemy.kernel.util.StringAttribute" value="The file or URL to be read.  Defaults to&#10; the Accessors home page (http://accessors.org).">
            </property>
            <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="Send a token to this input to read the&#10; file or URL.">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="The contents of the file or URL.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="options" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="resource" class="ptolemy.actor.parameters.PortParameter" value="SpeedometerComponent.js">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[175.0, 335.0]">
        </property>
        <port name="options" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="resource" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="GetResource4" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Accessor that gets a resource&#10;//&#10;// Copyright (c) 2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** Get a resource, which may be a relative file name or a URL, and return the&#10; *  value of the resource as a string.&#10; *&#10; *  Implementations of this function may restrict the locations from which&#10; *  resources can be retrieved. This implementation restricts relative file&#10; *  names to be in the same directory where the swarmlet model is located or&#10; *  in a subdirectory, or if the resource begins with &quot;$CLASSPATH/&quot;, to the&#10; *  classpath of the current Java process.&#10; *&#10; *  If the accessor is not restricted, the $KEYSTORE is resolved to&#10; *  $HOME/.ptKeystore.&#10; *&#10; *  The options parameter may have the following values:&#10; *  * If the type of the options parameter is a Number, then it is assumed&#10; *    to be the timeout in milliseconds.&#10; *  * If the type of the options parameter is a String, then it is assumed&#10; *    to be the encoding, for example &quot;UTF-8&quot;.  If the value is &quot;Raw&quot; or &quot;raw&quot;&#10; *    then the data is returned as an unsigned array of bytes.&#10; *    The default encoding is the default encoding of the system.&#10; *    In CapeCode, the default encoding is returned by Charset.defaultCharset().&#10; *  * If the type of the options parameter is an Object, then it may&#10; *    have the following fields:&#10; *  ** encoding {string} The encoding of the file, see above for values.&#10; *  ** timeout {number} The timeout in milliseconds.&#10; *&#10; *  If the callback parameter is not present, then getResource() will&#10; *  be synchronous read like Node.js's&#10; *  {@link https://nodejs.org/api/fs.html#fs_fs_readfilesync_path_options|fs.readFileSync()}.&#10; *  If the callback argument is present, then getResource() will be asynchronous like&#10; *  {@link https://nodejs.org/api/fs.html#fs_fs_readfile_path_options_callback|fs.readFile()}.&#10;&#10; *  @accessor util/GetResource&#10; *  @input options Options passed to the getResources() function, see above&#10; *  for details.&#10; *  @input resource {string} The file or URL to be read.  Defaults to&#10; *  the Accessors home page (http://accessors.org).&#10; *  @input trigger {boolean} Send a token to this input to read the&#10; *  file or URL.&#10; *  @output output The contents of the file or URL.&#10; *  @author Edward A. Lee&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals clearInterval, exports, require, setInterval */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;exports.setup = function () {&#10;    this.input('options', {&#10;        'type': 'JSON',&#10;        'value': ''&#10;    });&#10;    this.input('resource', {&#10;        'type': 'string',&#10;        'value': 'http://accessors.org'&#10;    });&#10;    this.input('trigger');&#10;&#10;    this.output('output');&#10;};&#10;exports.initialize = function () {&#10;    var self = this;&#10;    this.addInputHandler('trigger', function () {&#10;        var resourceValue = this.get('resource');&#10;        var resourceContents = getResource(this.get('resource'), this.get('options'), null);&#10;        self.send('output', resourceContents);&#10;    });&#10;};&#10;&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/utilities/GetResource.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Get a resource, which may be a relative file name or a URL, and return the&#10; value of the resource as a string.&lt;/p&gt;&#10;&lt;p&gt; Implementations of this function may restrict the locations from which&#10; resources can be retrieved. This implementation restricts relative file&#10; names to be in the same directory where the swarmlet model is located or&#10; in a subdirectory, or if the resource begins with &amp;quot;$CLASSPATH/&amp;quot;, to the&#10; classpath of the current Java process.&lt;/p&gt;&#10;&lt;p&gt; If the accessor is not restricted, the $KEYSTORE is resolved to&#10; $HOME/.ptKeystore.&lt;/p&gt;&#10;&lt;p&gt; The options parameter may have the following values:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;If the type of the options parameter is a Number, then it is assumed&#10;to be the timeout in milliseconds.&lt;/li&gt;&#10;&lt;li&gt;If the type of the options parameter is a String, then it is assumed&#10;to be the encoding, for example &amp;quot;UTF-8&amp;quot;.  If the value is &amp;quot;Raw&amp;quot; or &amp;quot;raw&amp;quot;&#10;then the data is returned as an unsigned array of bytes.&#10;The default encoding is the default encoding of the system.&#10;In CapeCode, the default encoding is returned by Charset.defaultCharset().&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;If the type of the options parameter is an Object, then it may&#10;have the following fields:&#10;&lt;strong&gt; encoding {string} The encoding of the file, see above for values.&#10;&lt;/strong&gt; timeout {number} The timeout in milliseconds.&lt;/p&gt;&#10;&lt;p&gt;If the callback parameter is not present, then getResource() will&#10;be synchronous read like Node.js's&#10;{@link https://nodejs.org/api/fs.html#fs_fs_readfilesync_path_options|fs.readFileSync()}.&#10;If the callback argument is present, then getResource() will be asynchronous like&#10;{@link https://nodejs.org/api/fs.html#fs_fs_readfile_path_options_callback|fs.readFile()}.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;/ul&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="options (port)" class="ptolemy.kernel.util.StringAttribute" value="Options passed to the getResources() function, see above&#10; for details.">
            </property>
            <property name="resource (port)" class="ptolemy.kernel.util.StringAttribute" value="The file or URL to be read.  Defaults to&#10; the Accessors home page (http://accessors.org).">
            </property>
            <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="Send a token to this input to read the&#10; file or URL.">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="The contents of the file or URL.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="options" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="resource" class="ptolemy.actor.parameters.PortParameter" value="OdometerComponent.js">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[180.0, 420.0]">
        </property>
        <port name="options" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="resource" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="Display" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={417, 647, 1064, 215}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[1064, 164]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[435.0, -10.0]">
        </property>
    </entity>
    <entity name="RoutingWebSocketServer" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2016-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** This accessor is an extension of the WebSocketServer, which wraps&#10; *  the functionality of the base class with the additional feature of&#10; *  tracking the ID attribute of JSON messages received from the network&#10; *  and automatically directing messages outgoing from the swarmlet with&#10; *  corresponding message ID parameters for the matching socketID number.&#10; *&#10; *  This accessor assumes messages sent over the web socket have the form&#10; *  of stringified JSON, where the JSON has a string attribute named &quot;ID&quot;&#10; *  (a message ID). When a message is received from the network, this &#10; *  accessor updates an internal mapping of message IDs to socketIDs&#10; *  to reflect the socket on which the message ID was received. When a&#10; *  JSON message is received on this accessor's routingSend input,&#10; *  it will be stringified and sent over the web socket to the socketID&#10; *  matching the outgoing message's ID attribute. Note: Outgoing messages&#10; *  without an ID attribute or without an established mapping to a socketID&#10; *  will be treated as errors and discarded! &#10; *&#10; *  To use this mode of communication, outgoing messages from the swarmlet&#10; *  should be directed to the &quot;routingSend&quot; input instead of the base class's&#10; *  &quot;toSend&quot; input.&#10; *&#10; *  Refer to the documentation of WebSocketServer for a more complete&#10; *  description of the extended accessor.&#10; *&#10; *  @accessor dashboard/RoutingWebSocketServer&#10; *  @parameter {string} hostInterface The IP address or domain name of the&#10; *    network interface to listen to.&#10; *  @parameter {int} port The port to listen to for connections.&#10; *  @parameter {string} pfxKeyCertPassword If sslTls is set to true, then this option needs&#10; *   to specify the password for the pfx key-cert file specified by pfxKeyCertPath.&#10; *  @parameter {string} pfxKeyCertPath If sslTls is set to true, then this option needs to&#10; *   specify the fully qualified filename for the file that stores the private key and certificate&#10; *   that this server will use to identify itself. This path can be any of those understood by the&#10; *   Ptolemy host, e.g. paths beginning with $CLASSPATH/.&#10; *  @parameter {string} receiveType The MIME type for incoming messages,&#10; *    which defaults to 'text/plain'.&#10; *  @parameter {string} sendType The MIME type for outgoing messages,&#10; *    which defaults to 'text/plain'.&#10; *  @parameter {boolean} sslTls Whether SSL/TLS is enabled. This defaults to false.&#10; *  @input routingSend JSON data with an 'ID' attribute to be stringified and sent&#10; *    over the open socket upon which this accessor has prior received a network message with a matching&#10; *    'ID' attribute.&#10; *  @input toSend The data to be sent to open sockets.&#10; *    If this is an object with 'socketID' field and a 'message' field,&#10; *    then send the value of the message field to the socket identified&#10; *    by the socketID field. If the input has any other form, then the&#10; *    message is broadcast to all open socket connections.&#10; *  @output {int} listening When the server is listening for connections, this output&#10; *    will produce the port number that the server is listening on&#10; *  @output connection An output produced when a connection opens or closes.&#10; *    The output is an object with two fields, a 'socketID',&#10; *    which is a unique ID for this client connection, and a 'status' field,&#10; *    which is the string 'open' or 'closed'.&#10; *  @output received A message received a client in the form of an object with two fields,&#10; *    a 'socketID', which is a unique ID for this client connection, and a 'message' field,&#10; *    which is the message received from the client.&#10; *  @author Hokeun Kim, Edward Lee&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals console, error, exports, require */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;/*jslint plusplus: true */&#10;&#10;/** Sets up the accessor by defining inputs and outputs. */&#10;exports.setup = function () {&#10;    this.extend('net/WebSocketServer');&#10;    this.parameter('receiveType', {&#10;        value: 'text/plain'&#10;    });&#10;    this.parameter('sendType', {&#10;        value: 'text/plain'&#10;    });&#10;    //Port defaults to 8095&#10;    this.parameter('port',{&#10;        value: 8095&#10;    });&#10;    this.input('routingSend');&#10;};&#10;&#10;/** Adds an input handler on routingSend that converts the input into a message delivered&#10; * to the toSend input of the superclass.&#10; */&#10;exports.initialize = function () {&#10;    this.routingTable = {};&#10;    exports.ssuper.initialize.call(this);&#10;&#10;    //Find the matching socketID for the messageID in the routing table, construct a toSend input&#10;    //to WebSocketServer, and send it.&#10;    this.addInputHandler('routingSend', function(){&#10;        var routingIn = this.get('routingSend');&#10;        if(routingIn &amp;&amp; routingIn.id){&#10;            var wrappedMsg = {&#10;                &quot;message&quot;: JSON.stringify(routingIn),&#10;                &quot;socketID&quot;: this.routingTable[routingIn.id]&#10;            };&#10;            this.send('toSend', wrappedMsg);&#10;        } else {&#10;            error('Input to RoutingSend must be JSON with an id property');&#10;        }&#10;    });&#10;};&#10;&#10;//Override&#10;//Find the messageID corresponding to the closed socketID and delete it from the mapping &#10;exports.notifyClose = function(socketID){&#10;    for(var messageID in this.routingTable){&#10;        if(this.routingTable.hasOwnProperty(messageID) &amp;&amp; this.routingTable[messageID] == socketID){&#10;            delete this.routingTable[messageID];&#10;        }&#10;    }&#10;    return;&#10;};&#10;&#10;//Override&#10;//Establish a mapping between the received messageID and socketID.&#10;//TODO Perhaps this function should close sockets when the messageID&#10;//is reassigned to a new socket?&#10;exports.filterReceived = function (message, socketID) {&#10;    var messageID;&#10;    try{&#10;        var parsed = JSON.parse(message);&#10;        if(parsed &amp;&amp; parsed.id){&#10;            this.routingTable[parsed.id] = socketID;&#10;        } else {&#10;            console.log(&quot;WARNING: RoutingWebSocketServer expects messages to be stringified JSON with an ID attribute.&quot;);&#10;            console.log(&quot;The received message is stringified JSON but does not have an ID attribute.&quot;);&#10;            return message;&#10;        }&#10;    } catch (err) {&#10;        console.log(&quot;WARNING: RoutingWebSocketServer expects messages to be stringified JSON with an ID attribute.&quot;);&#10;        console.log(&quot;The received message is not stringified JSON.&quot;);&#10;        return message;&#10;    }&#10;    return message;&#10;};&#10;&#10;exports.wrapup = function() {&#10;    exports.ssuper.wrapup.call(this);&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/dashboard/RoutingWebSocketServer.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor is an extension of the WebSocketServer, which wraps&#10; the functionality of the base class with the additional feature of&#10; tracking the ID attribute of JSON messages received from the network&#10; and automatically directing messages outgoing from the swarmlet with&#10; corresponding message ID parameters for the matching socketID number.&lt;/p&gt;&#10;&lt;p&gt; This accessor assumes messages sent over the web socket have the form&#10; of stringified JSON, where the JSON has a string attribute named &amp;quot;ID&amp;quot;&#10; (a message ID). When a message is received from the network, this &#10; accessor updates an internal mapping of message IDs to socketIDs&#10; to reflect the socket on which the message ID was received. When a&#10; JSON message is received on this accessor's routingSend input,&#10; it will be stringified and sent over the web socket to the socketID&#10; matching the outgoing message's ID attribute. Note: Outgoing messages&#10; without an ID attribute or without an established mapping to a socketID&#10; will be treated as errors and discarded! &lt;/p&gt;&#10;&lt;p&gt; To use this mode of communication, outgoing messages from the swarmlet&#10; should be directed to the &amp;quot;routingSend&amp;quot; input instead of the base class's&#10; &amp;quot;toSend&amp;quot; input.&lt;/p&gt;&#10;&lt;p&gt; Refer to the documentation of WebSocketServer for a more complete&#10; description of the extended accessor.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Hokeun Kim, Edward Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="routingSend (port)" class="ptolemy.kernel.util.StringAttribute" value="JSON data with an 'ID' attribute to be stringified and sent&#10;   over the open socket upon which this accessor has prior received a network message with a matching&#10;   'ID' attribute.">
            </property>
            <property name="toSend (port)" class="ptolemy.kernel.util.StringAttribute" value="The data to be sent to open sockets.&#10;   If this is an object with 'socketID' field and a 'message' field,&#10;   then send the value of the message field to the socket identified&#10;   by the socketID field. If the input has any other form, then the&#10;   message is broadcast to all open socket connections.">
            </property>
            <property name="listening (port)" class="ptolemy.kernel.util.StringAttribute" value="When the server is listening for connections, this output&#10;   will produce the port number that the server is listening on">
            </property>
            <property name="connection (port)" class="ptolemy.kernel.util.StringAttribute" value="An output produced when a connection opens or closes.&#10;   The output is an object with two fields, a 'socketID',&#10;   which is a unique ID for this client connection, and a 'status' field,&#10;   which is the string 'open' or 'closed'.">
            </property>
            <property name="received (port)" class="ptolemy.kernel.util.StringAttribute" value="A message received a client in the form of an object with two fields,&#10;   a 'socketID', which is a unique ID for this client connection, and a 'message' field,&#10;   which is the message received from the client.">
            </property>
            <property name="hostInterface (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The IP address or domain name of the&#10;   network interface to listen to.">
            </property>
            <property name="port (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The port to listen to for connections.">
            </property>
            <property name="pfxKeyCertPassword (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If sslTls is set to true, then this option needs&#10;  to specify the password for the pfx key-cert file specified by pfxKeyCertPath.">
            </property>
            <property name="pfxKeyCertPath (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If sslTls is set to true, then this option needs to&#10;  specify the fully qualified filename for the file that stores the private key and certificate&#10;  that this server will use to identify itself. This path can be any of those understood by the&#10;  Ptolemy host, e.g. paths beginning with $CLASSPATH/.">
            </property>
            <property name="receiveType (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The MIME type for incoming messages,&#10;   which defaults to 'text/plain'.">
            </property>
            <property name="sendType (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The MIME type for outgoing messages,&#10;   which defaults to 'text/plain'.">
            </property>
            <property name="sslTls (parameter)" class="ptolemy.kernel.util.StringAttribute" value="Whether SSL/TLS is enabled. This defaults to false.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="hostInterface" class="ptolemy.data.expr.Parameter" value="localhost">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="pfxKeyCertPassword" class="ptolemy.data.expr.Parameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="pfxKeyCertPath" class="ptolemy.data.expr.Parameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="receiveType" class="ptolemy.data.expr.Parameter" value="text/plain">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="sendType" class="ptolemy.data.expr.Parameter" value="text/plain">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[775.0, 200.0]">
        </property>
        <port name="toSend" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="received" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_spontaneous" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="listening" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_spontaneous" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="connection" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_spontaneous" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="routingSend" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
    </entity>
    <entity name="GetResource5" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Accessor that gets a resource&#10;//&#10;// Copyright (c) 2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** Get a resource, which may be a relative file name or a URL, and return the&#10; *  value of the resource as a string.&#10; *&#10; *  Implementations of this function may restrict the locations from which&#10; *  resources can be retrieved. This implementation restricts relative file&#10; *  names to be in the same directory where the swarmlet model is located or&#10; *  in a subdirectory, or if the resource begins with &quot;$CLASSPATH/&quot;, to the&#10; *  classpath of the current Java process.&#10; *&#10; *  If the accessor is not restricted, the $KEYSTORE is resolved to&#10; *  $HOME/.ptKeystore.&#10; *&#10; *  The options parameter may have the following values:&#10; *  * If the type of the options parameter is a Number, then it is assumed&#10; *    to be the timeout in milliseconds.&#10; *  * If the type of the options parameter is a String, then it is assumed&#10; *    to be the encoding, for example &quot;UTF-8&quot;.  If the value is &quot;Raw&quot; or &quot;raw&quot;&#10; *    then the data is returned as an unsigned array of bytes.&#10; *    The default encoding is the default encoding of the system.&#10; *    In CapeCode, the default encoding is returned by Charset.defaultCharset().&#10; *  * If the type of the options parameter is an Object, then it may&#10; *    have the following fields:&#10; *  ** encoding {string} The encoding of the file, see above for values.&#10; *  ** timeout {number} The timeout in milliseconds.&#10; *&#10; *  If the callback parameter is not present, then getResource() will&#10; *  be synchronous read like Node.js's&#10; *  {@link https://nodejs.org/api/fs.html#fs_fs_readfilesync_path_options|fs.readFileSync()}.&#10; *  If the callback argument is present, then getResource() will be asynchronous like&#10; *  {@link https://nodejs.org/api/fs.html#fs_fs_readfile_path_options_callback|fs.readFile()}.&#10;&#10; *  @accessor util/GetResource&#10; *  @input options Options passed to the getResources() function, see above&#10; *  for details.&#10; *  @input resource {string} The file or URL to be read.  Defaults to&#10; *  the Accessors home page (http://accessors.org).&#10; *  @input trigger {boolean} Send a token to this input to read the&#10; *  file or URL.&#10; *  @output output The contents of the file or URL.&#10; *  @author Edward A. Lee&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals clearInterval, exports, require, setInterval */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;exports.setup = function () {&#10;    this.input('options', {&#10;        'type': 'JSON',&#10;        'value': ''&#10;    });&#10;    this.input('resource', {&#10;        'type': 'string',&#10;        'value': 'http://accessors.org'&#10;    });&#10;    this.input('trigger');&#10;&#10;    this.output('output');&#10;};&#10;exports.initialize = function () {&#10;    var self = this;&#10;    this.addInputHandler('trigger', function () {&#10;        var resourceValue = this.get('resource');&#10;        var resourceContents = getResource(this.get('resource'), this.get('options'), null);&#10;        self.send('output', resourceContents);&#10;    });&#10;};&#10;&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/utilities/GetResource.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Get a resource, which may be a relative file name or a URL, and return the&#10; value of the resource as a string.&lt;/p&gt;&#10;&lt;p&gt; Implementations of this function may restrict the locations from which&#10; resources can be retrieved. This implementation restricts relative file&#10; names to be in the same directory where the swarmlet model is located or&#10; in a subdirectory, or if the resource begins with &amp;quot;$CLASSPATH/&amp;quot;, to the&#10; classpath of the current Java process.&lt;/p&gt;&#10;&lt;p&gt; If the accessor is not restricted, the $KEYSTORE is resolved to&#10; $HOME/.ptKeystore.&lt;/p&gt;&#10;&lt;p&gt; The options parameter may have the following values:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;If the type of the options parameter is a Number, then it is assumed&#10;to be the timeout in milliseconds.&lt;/li&gt;&#10;&lt;li&gt;If the type of the options parameter is a String, then it is assumed&#10;to be the encoding, for example &amp;quot;UTF-8&amp;quot;.  If the value is &amp;quot;Raw&amp;quot; or &amp;quot;raw&amp;quot;&#10;then the data is returned as an unsigned array of bytes.&#10;The default encoding is the default encoding of the system.&#10;In CapeCode, the default encoding is returned by Charset.defaultCharset().&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;If the type of the options parameter is an Object, then it may&#10;have the following fields:&#10;&lt;strong&gt; encoding {string} The encoding of the file, see above for values.&#10;&lt;/strong&gt; timeout {number} The timeout in milliseconds.&lt;/p&gt;&#10;&lt;p&gt;If the callback parameter is not present, then getResource() will&#10;be synchronous read like Node.js's&#10;{@link https://nodejs.org/api/fs.html#fs_fs_readfilesync_path_options|fs.readFileSync()}.&#10;If the callback argument is present, then getResource() will be asynchronous like&#10;{@link https://nodejs.org/api/fs.html#fs_fs_readfile_path_options_callback|fs.readFile()}.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;/ul&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="options (port)" class="ptolemy.kernel.util.StringAttribute" value="Options passed to the getResources() function, see above&#10; for details.">
            </property>
            <property name="resource (port)" class="ptolemy.kernel.util.StringAttribute" value="The file or URL to be read.  Defaults to&#10; the Accessors home page (http://accessors.org).">
            </property>
            <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="Send a token to this input to read the&#10; file or URL.">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="The contents of the file or URL.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="options" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="resource" class="ptolemy.actor.parameters.PortParameter" value="RestaurantComponent.js">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[180.0, 515.0]">
        </property>
        <port name="options" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="resource" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="ParameterizedBlockingGetResource" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Accessor that gets a resource&#10;//&#10;// Copyright (c) 2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** Get a resource, which may be a relative file name or a URL, and return the&#10; *  value of the resource as a string.&#10; *&#10; *  Implementations of this function may restrict the locations from which&#10; *  resources can be retrieved. This implementation restricts relative file&#10; *  names to be in the same directory where the swarmlet model is located or&#10; *  in a subdirectory, or if the resource begins with &quot;$CLASSPATH/&quot;, to the&#10; *  classpath of the current Java process.&#10; *&#10; *  If the accessor is not restricted, the $KEYSTORE is resolved to&#10; *  $HOME/.ptKeystore.&#10; *&#10; *  The options parameter may have the following values:&#10; *  * If the type of the options parameter is a Number, then it is assumed&#10; *    to be the timeout in milliseconds.&#10; *  * If the type of the options parameter is a String, then it is assumed&#10; *    to be the encoding, for example &quot;UTF-8&quot;.  If the value is &quot;Raw&quot; or &quot;raw&quot;&#10; *    then the data is returned as an unsigned array of bytes.&#10; *    The default encoding is the default encoding of the system.&#10; *    In CapeCode, the default encoding is returned by Charset.defaultCharset().&#10; *  * If the type of the options parameter is an Object, then it may&#10; *    have the following fields:&#10; *  ** encoding {string} The encoding of the file, see above for values.&#10; *  ** timeout {number} The timeout in milliseconds.&#10; *&#10; *  If the callback parameter is not present, then getResource() will&#10; *  be synchronous read like Node.js's&#10; *  {@link https://nodejs.org/api/fs.html#fs_fs_readfilesync_path_options|fs.readFileSync()}.&#10; *  If the callback argument is present, then getResource() will be asynchronous like&#10; *  {@link https://nodejs.org/api/fs.html#fs_fs_readfile_path_options_callback|fs.readFile()}.&#10;&#10; *  @accessor util/GetResource&#10; *  @input options Options passed to the getResources() function, see above&#10; *  for details.&#10; *  @input resource {string} The file or URL to be read.  Defaults to&#10; *  the Accessors home page (http://accessors.org).&#10; *  @input trigger {boolean} Send a token to this input to read the&#10; *  file or URL.&#10; *  @output output The contents of the file or URL.&#10; *  @author Edward A. Lee&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals clearInterval, exports, require, setInterval */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;exports.setup = function () {&#10;    this.input('options', {&#10;        'type': 'JSON',&#10;        'value': ''&#10;    });&#10;    this.input('resource', {&#10;        'type': 'string',&#10;        'value': ''&#10;    });&#10;    this.input('trigger');&#10;&#10;    this.output('output');&#10;};&#10;exports.initialize = function () {&#10;    var self = this;&#10;    this.setDefault('resource', '');&#10;    //WILL NOT SEND IF RESOURCE HAS NOT BEEN UPDATED TO A NEW VALUE!&#10;    this.addInputHandler('trigger', function () {&#10;        var resourceValue = this.get('resource');&#10;        if(resourceValue){&#10;	        var resourceContents = getResource(this.get('resource'), this.get('options'), null);&#10;	        var paramaterizedAccessor = { &quot;accessor&quot;: resourceContents,&#10;	            &quot;parameterMap&quot;: { &quot;componentID&quot;: &quot;parkingComponent&quot; },&#10;	            &quot;inputMap&quot;: {}&#10;	            };&#10;	        self.send('output', paramaterizedAccessor);&#10;        }&#10;    });&#10;};&#10;&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/utilities/GetResource.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Get a resource, which may be a relative file name or a URL, and return the&#10; value of the resource as a string.&lt;/p&gt;&#10;&lt;p&gt; Implementations of this function may restrict the locations from which&#10; resources can be retrieved. This implementation restricts relative file&#10; names to be in the same directory where the swarmlet model is located or&#10; in a subdirectory, or if the resource begins with &amp;quot;$CLASSPATH/&amp;quot;, to the&#10; classpath of the current Java process.&lt;/p&gt;&#10;&lt;p&gt; If the accessor is not restricted, the $KEYSTORE is resolved to&#10; $HOME/.ptKeystore.&lt;/p&gt;&#10;&lt;p&gt; The options parameter may have the following values:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;If the type of the options parameter is a Number, then it is assumed&#10;to be the timeout in milliseconds.&lt;/li&gt;&#10;&lt;li&gt;If the type of the options parameter is a String, then it is assumed&#10;to be the encoding, for example &amp;quot;UTF-8&amp;quot;.  If the value is &amp;quot;Raw&amp;quot; or &amp;quot;raw&amp;quot;&#10;then the data is returned as an unsigned array of bytes.&#10;The default encoding is the default encoding of the system.&#10;In CapeCode, the default encoding is returned by Charset.defaultCharset().&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;If the type of the options parameter is an Object, then it may&#10;have the following fields:&#10;&lt;strong&gt; encoding {string} The encoding of the file, see above for values.&#10;&lt;/strong&gt; timeout {number} The timeout in milliseconds.&lt;/p&gt;&#10;&lt;p&gt;If the callback parameter is not present, then getResource() will&#10;be synchronous read like Node.js's&#10;{@link https://nodejs.org/api/fs.html#fs_fs_readfilesync_path_options|fs.readFileSync()}.&#10;If the callback argument is present, then getResource() will be asynchronous like&#10;{@link https://nodejs.org/api/fs.html#fs_fs_readfile_path_options_callback|fs.readFile()}.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;/ul&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="options (port)" class="ptolemy.kernel.util.StringAttribute" value="Options passed to the getResources() function, see above&#10; for details.">
            </property>
            <property name="resource (port)" class="ptolemy.kernel.util.StringAttribute" value="The file or URL to be read.  Defaults to&#10; the Accessors home page (http://accessors.org).">
            </property>
            <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="Send a token to this input to read the&#10; file or URL.">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="The contents of the file or URL.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="options" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="resource" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[180.0, 605.0]">
        </property>
        <property name="_localChanges" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <port name="options" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="resource" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="ParkingDialogue" class="ptolemy.actor.TypedCompositeActor">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[190.0, 730.0]">
        </property>
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={311, 199, 914, 641}, maximized=false}">
        </property>
        <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 522]">
        </property>
        <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="0.8000000000000006">
        </property>
        <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{335.31685138081326, 155.6961936773256}">
        </property>
        <port name="parkingMessage" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[-40.0, 170.0]">
            </property>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="response" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[640.0, 160.0]">
            </property>
        </port>
        <entity name="SemanticRepositoryQuery" class="org.terraswarm.accessor.JSAccessor">
            <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
            </property>
            <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
            </property>
            <property name="script" class="ptolemy.actor.parameters.PortParameter" value="/** Perform a SPARQL query on a semantic repository such as GraphDB.&#10; * &#10; *  SPARQL is a W3C standard for querying semantic repositories,&#10; *  playing an analogous role to SQL with respect to relational&#10; *  databases. Semantic repositories fall within the domain of knowledge&#10; *  representation in AI and typically are implemented as a triplestore:&#10; *  entries in the repository have the form &quot;subject&quot;, &quot;predicate&quot;, &quot;object&quot;&#10; *  eg. &quot;An Apple&quot; &quot;IsA&quot; &quot;Fruit&quot;&#10; *  &#10; *  An example SPARQL query to get a list of up to 100 triples in the repository:&#10; *&#10; *  select * where { &#10; *      ?s ?p ?o .&#10; *  } limit 100&#10; *&#10; *  Documentation for SPARQL and the SPARQL Protocol can be found at&#10; *  https://www.w3.org/TR/rdf-sparql-query/&#10; *&#10; *  Information on GraphDB can be found at&#10; *  http://graphdb.ontotext.com/&#10; *  &#10; *  SPARQL is also a protocol for communicating with RDF databases&#10; *  Upon receiving a query input, this accessor performs an http GET&#10; *  to the specified server and port with the querystring &quot;query&quot; set to the&#10; *  query input. The JSON response from the semantic repository (if any) is &#10; *  sent to the response output. Depending on the query type, the &#10; *  response will be JSON &quot;sparql-results&quot; or &quot;rdf+json&quot;&#10; *&#10; *  This accessor does not block waiting for the response, but if any additional&#10; *  *query* input is received before a pending request has received a response&#10; *  or timed out, then the new request will be queued and sent out only after&#10; *  the pending request has completed. This strategy ensures that outputs are&#10; *  produced in the same order as the input requests.&#10; *&#10; *  @accessor services/SemanticRepositoryQuery&#10; *  @author Matt Weber&#10; *  @version $$Id: SemanticRepository.js 1725 2017-05-19 22:59:11Z cxh $$&#10; *  @input {string} query The SPARQL query to be sent to the semantic repository.&#10; *   Types of queries yielding a response are: SELECT, CONSTRUCT, ASK, and DESCRIBE&#10; *  @parameter {string} protocol Either http or https.&#10; *  @parameter {string} host The URL for the semantic repository.&#10; *  @parameter {string} port The port for the semantic repository.&#10; *  @parameter {string} repositoryName The name of the particular repository on the host.&#10; *  @parameter {boolean} authenticate If true, enable authentication to an access controlled&#10; *   semantic repository by sending username and password with request. If false, username &#10; *   and password information will not be sent. An error will occur if the http protocol is&#10; *   selected with a true authenticate setting to avoid sending username/password information&#10; *   in plain text.&#10; *  @parameter {string} username A username for an access controlled semantic repository. &#10; *  @parameter {string} password A password for an access controlled semantic repository.&#10; *  @parameter {int} timeout The amount of time (in milliseconds) to wait for a response&#10; *   before triggering a null response and an error. This defaults to 20000.&#10; *  @output response An object containing the raw response from the service conforming&#10; *   to the SPARQL protocol. If the query type was SELECT or ASK the response will be&#10; *   JSON &quot;sparql-results&quot;. If the query type was CONSTRUCT or DESCRIBE the response&#10; *   will be &quot;rdf+json&quot;.&#10; */&#10;&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals addInputHandler, addInputParameter, console, error, exports, extend, input, get, getParameter, getResource, output, parameter, send */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10; &#10; /** Set up the accessor by defining the inputs and outputs.&#10; */&#10;&#10;var base64 = require('base64-js');&#10;&#10;exports.setup = function () {&#10;    this.extend('net/REST');&#10;    this.input('query', {&#10;        'type': 'string'&#10;    });&#10;&#10;    this.parameter('protocol', {&#10;        'type': 'string',&#10;        'value': 'http',&#10;        'options': ['http', 'https']&#10;    });&#10;&#10;    this.parameter('host', {&#10;        'type': 'string',&#10;        'value': 'localhost'&#10;    });&#10;&#10;    this.parameter('port', {&#10;        'type': 'int',&#10;        'value': 7200&#10;    });&#10;&#10;    this.parameter('repositoryName', {&#10;        'type': 'string',&#10;    });&#10;&#10;    this.parameter('authenticate', {&#10;        'type': 'boolean',&#10;        'value': false&#10;    });&#10;&#10;    this.parameter('username', {&#10;        'type': 'string',&#10;        'value': 'admin'&#10;    });&#10;&#10;    this.parameter('password', {&#10;        'type': 'string',&#10;        'value': 'root'&#10;    });&#10;&#10;    //Overriding inherited default timeout value of 5000ms to allow for longer queries by default&#10;    this.parameter('timeout', {&#10;        'type': 'int',&#10;        'value': 20000&#10;    });&#10;&#10;    //Use the response output from the REST accessor&#10;&#10;&#10;    // Change default values of the base class inputs.&#10;    // Also, hide base class inputs, except trigger.&#10;    this.input('options', {&#10;        'visibility': 'expert',&#10;    });&#10;    this.input('command', {&#10;        'visibility': 'expert',&#10;    });&#10;    this.input('arguments', {&#10;        'visibility': 'expert',&#10;    });&#10;    this.input('body', {&#10;        'visibility': 'expert'&#10;    });&#10;    this.input('trigger', {&#10;        'visibility': 'expert'&#10;    });&#10;    this.output('headers', {&#10;        'visibility': 'expert'&#10;    });&#10;    this.output('status', {&#10;        'visibility': 'expert'&#10;    });&#10;    this.parameter('outputCompleteResponseOnly', {&#10;        'visibility': 'expert'&#10;    });&#10;};&#10;&#10;//Overriding REST&#10;exports.filterResponse = function(response){&#10;    return JSON.parse(response);&#10;};&#10;&#10;//Overriding REST&#10;//Connections to the SemanticRepository should be closed once data has been received.&#10;exports.handleResponse = function(message){&#10;     exports.ssuper.handleResponse.call(this, message);&#10;     exports.ssuper.wrapup();&#10;};&#10;&#10;exports.initialize = function(){&#10;    exports.ssuper.initialize.call(this);&#10;    &#10;    //Check for bad authentication and protocol settings at initialization.&#10;    if(this.getParameter('protocol') == 'http' &amp;&amp; this.getParameter('authenticate') ){&#10;        error(&quot;Semantic Repository authentication setting incompatible with protocol setting. This accessor will not send username and password information in plain text over http. Change to https or dissable authentication.&quot;);&#10;    }&#10;&#10;    var thiz = this;&#10;&#10;    this.addInputHandler('query', function(){&#10;&#10;        //Check for bad authentication and protocol settings when preparing to send.&#10;        if(thiz.getParameter('protocol') == 'http' &amp;&amp; thiz.getParameter('authenticate') ){&#10;            error(&quot;Semantic Repository authentication setting incompatible with protocol setting. This accessor will not send username and password information in plain text over http. Change to https or dissable authentication.&quot;);&#10;            return;&#10;        }&#10;&#10;        var queryInput = thiz.get('query');&#10;        var host = thiz.getParameter('host');&#10;        var port = thiz.getParameter('port');&#10;        var repositoryName = thiz.getParameter('repositoryName');&#10;        var authenticate = thiz.getParameter('authenticate');&#10;        var protocol = thiz.getParameter('protocol');&#10;&#10;        var options = {&#10;            'headers' : {'Accept':'application/sparql-results+json, application/rdf+json'},&#10;            'method'  : 'GET',&#10;            'url'     : {'host'  : host,&#10;                        'port'   : port,&#10;                        'protocol' : protocol&#10;                        }&#10;        };&#10;&#10;        //If authenticating, add base64 encoded username and password to headers.&#10;        //See basic authentication under http://graphdb.ontotext.com/documentation/standard/authentication.html&#10;        if(authenticate &amp;&amp; protocol == 'https'){&#10;            var username = thiz.getParameter('username');&#10;            var password = thiz.getParameter('password');&#10;&#10;            //Note, contrary to the graphDB documentation, the separator between&#10;            //username and password is a colon, not a forward slash.&#10;            var login = username +&quot;:&quot; + password;&#10;            var loginArray = login.split(&quot;&quot;);&#10;            var loginNumeric = loginArray.map(function(x){ return x.charCodeAt(0)});&#10;            var loginUint = new Uint8Array(loginNumeric);&#10;            var login64 = base64.fromByteArray(loginUint);&#10;            options.headers.Authorization =  'Basic ' + login64;&#10;        }&#10;&#10;        var command = 'repositories/' + repositoryName;&#10;        var args = {'query' : queryInput} ;&#10;&#10;        thiz.send('options', options);&#10;        thiz.send('command', command);&#10;        thiz.send('arguments', args);&#10;        thiz.send('trigger', true);&#10;    });&#10;};&#10;">
                <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                    <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                    </property>
                </property>
            </property>
            <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/services/SemanticRepositoryQuery.js">
            </property>
            <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
                <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Perform a SPARQL query on a semantic repository such as GraphDB.&lt;/p&gt;&#10;&lt;p&gt; SPARQL is a W3C standard for querying semantic repositories,&#10; playing an analogous role to SQL with respect to relational&#10; databases. Semantic repositories fall within the domain of knowledge&#10; representation in AI and typically are implemented as a triplestore:&#10; entries in the repository have the form &amp;quot;subject&amp;quot;, &amp;quot;predicate&amp;quot;, &amp;quot;object&amp;quot;&#10; eg. &amp;quot;An Apple&amp;quot; &amp;quot;IsA&amp;quot; &amp;quot;Fruit&amp;quot;&lt;/p&gt;&#10;&lt;p&gt; An example SPARQL query to get a list of up to 100 triples in the repository:&lt;/p&gt;&#10;&lt;p&gt; select * where { &#10;     ?s ?p ?o .&#10; } limit 100&lt;/p&gt;&#10;&lt;p&gt; Documentation for SPARQL and the SPARQL Protocol can be found at&#10; https://&lt;a href=&quot;http://www.w3.org/TR/rdf-sparql-query/&quot;&gt;www.w3.org/TR/rdf-sparql-query/&lt;/a&gt;&lt;/p&gt;&#10;&lt;p&gt; Information on GraphDB can be found at&#10; http://graphdb.ontotext.com/&lt;/p&gt;&#10;&lt;p&gt; SPARQL is also a protocol for communicating with RDF databases&#10; Upon receiving a query input, this accessor performs an http GET&#10; to the specified server and port with the querystring &amp;quot;query&amp;quot; set to the&#10; query input. The JSON response from the semantic repository (if any) is &#10; sent to the response output. Depending on the query type, the &#10; response will be JSON &amp;quot;sparql-results&amp;quot; or &amp;quot;rdf+json&amp;quot;&lt;/p&gt;&#10;&lt;p&gt; This accessor does not block waiting for the response, but if any additional&#10; &lt;em&gt;query&lt;/em&gt; input is received before a pending request has received a response&#10; or timed out, then the new request will be queued and sent out only after&#10; the pending request has completed. This strategy ensures that outputs are&#10; produced in the same order as the input requests.&lt;/p&gt;">
                </property>
                <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Matt Weber">
                </property>
                <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: SemanticRepository.js 1725 2017-05-19 22:59:11Z cxh $$">
                </property>
                <property name="query (port)" class="ptolemy.kernel.util.StringAttribute" value="The SPARQL query to be sent to the semantic repository.&#10;  Types of queries yielding a response are: SELECT, CONSTRUCT, ASK, and DESCRIBE">
                </property>
                <property name="response (port)" class="ptolemy.kernel.util.StringAttribute" value="An object containing the raw response from the service conforming&#10;  to the SPARQL protocol. If the query type was SELECT or ASK the response will be&#10;  JSON &quot;sparql-results&quot;. If the query type was CONSTRUCT or DESCRIBE the response&#10;  will be &quot;rdf+json&quot;.">
                </property>
                <property name="protocol (parameter)" class="ptolemy.kernel.util.StringAttribute" value="Either http or https.">
                </property>
                <property name="host (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The URL for the semantic repository.">
                </property>
                <property name="port (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The port for the semantic repository.">
                </property>
                <property name="repositoryName (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The name of the particular repository on the host.">
                </property>
                <property name="authenticate (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If true, enable authentication to an access controlled&#10;  semantic repository by sending username and password with request. If false, username &#10;  and password information will not be sent. An error will occur if the http protocol is&#10;  selected with a true authenticate setting to avoid sending username/password information&#10;  in plain text.">
                </property>
                <property name="username (parameter)" class="ptolemy.kernel.util.StringAttribute" value="A username for an access controlled semantic repository.">
                </property>
                <property name="password (parameter)" class="ptolemy.kernel.util.StringAttribute" value="A password for an access controlled semantic repository.">
                </property>
                <property name="timeout (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The amount of time (in milliseconds) to wait for a response&#10;  before triggering a null response and an error. This defaults to 20000.">
                </property>
            </property>
            <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
                </property>
                <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
                </property>
            </property>
            <property name="options" class="ptolemy.actor.parameters.PortParameter" value="">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="command" class="ptolemy.actor.parameters.PortParameter" value="">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="arguments" class="ptolemy.actor.parameters.PortParameter" value="">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="protocol" class="ptolemy.data.expr.Parameter" value="https">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="host" class="ptolemy.data.expr.Parameter" value="localhost">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="repositoryName" class="ptolemy.data.expr.Parameter" value="AutomotiveServices">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="username" class="ptolemy.data.expr.Parameter" value="admin">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="password" class="ptolemy.data.expr.Parameter" value="root">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[480.0, 280.0]">
            </property>
            <property name="authenticate" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <port name="options" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </port>
            <port name="command" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
            </port>
            <port name="arguments" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </port>
            <port name="trigger" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
            <port name="body" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
            <port name="response" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
            <port name="status" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
            <port name="headers" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
            <port name="query" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
        </entity>
        <entity name="Display" class="ptolemy.actor.lib.gui.Display">
            <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={189, 294, 1206, 557}, maximized=false}">
            </property>
            <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[1206, 513]">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[645.0, 110.0]">
            </property>
        </entity>
        <entity name="ResponseGenerator" class="ptolemy.actor.lib.jjs.JavaScript">
            <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
            </property>
            <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
            </property>
            <property name="script" class="ptolemy.actor.parameters.PortParameter" value="exports.setup = function() {&#10;    this.input('services');&#10;    this.input('latitude',{&#10;        'type': 'number'&#10;    });&#10;    this.input('longitude',{&#10;        'type': 'number'&#10;    });&#10;    this.output('response');&#10;    this.parameter(&quot;MapsAPIKeyLocation&quot;, {&#10;        type: &quot;string&quot;,&#10;        value: &quot;MAPS_API_KEY_DONT_COMMIT.txt&quot;&#10;    });&#10;};&#10;&#10;exports.initialize = function() {&#10;    var options = '';&#10;    var self = this;&#10;&#10;    var resourceValue = this.getParameter('MapsAPIKeyLocation');&#10;    var resourceContents = getResource(resourceValue, options, null);&#10;    &#10;    //Don't send response until this accessor receives both a location and update&#10;    //at least once.&#10;    //Center for map location&#10;    var location = null;&#10;    var update = null;&#10;&#10;    this.addInputHandler('longitude', function(){&#10;        location = {&#10;            &quot;lat&quot;: this.get('latitude'),&#10;            &quot;lng&quot;: this.get('longitude')&#10;        }&#10;&#10;        //Only send if at least one update has been received so far&#10;        if(update){&#10;            update.mapPosition = location&#10;            self.send('response', update);&#10;        }&#10;    });&#10;&#10;    this.addInputHandler('services', function() {&#10;        var result = this.get('services');&#10;        &#10;        //console.log(result.results);&#10;        &#10;        if(typeof result === 'string'){&#10;          //connection or some other error&#10;          error(&quot;Error in NearbyServices. Instead of service query response, recieved: &quot; + result);&#10;        }&#10;        &#10;        else{&#10;           var resultLength = result.results.bindings.length;          &#10;           var nearbyServices = [];&#10;           //console.log(JSON.stringify(result.results));&#10;           &#10;       	   for (var k=0; k&lt; resultLength; k++){  	   	&#10;       	   	 //console.log(result.results.bindings[k]);&#10;       	  	 var s_name = result.results.bindings[k].name.value; //extract after #&#10;       	  	 var service_name_res = s_name.split(&quot;#&quot;);&#10;       	  	 var service_name = &quot;&quot;;&#10;       	  	 if(service_name_res.length&gt;1){&#10;       	  	 	service_name = service_name_res[1];&#10;       	  	 }&#10;       	  	 else{&#10;       	  	 	service_name = service_name_res[0]; &#10;       	  	 }&#10;       	  	 &#10;       	  	 //extract lat long from cWKT. &#10;       	  	 //TODO: replace this temp code&#10;       	   	 var s_loc = result.results.bindings[k].location.value; //split ' ' on substring between 'Point(' and ')'&#10;       	   	 var start_pos = s_loc.search(&quot;\\(&quot;);&#10;       	   	 var end_pos = s_loc.search(&quot;\\)&quot;);&#10;       	   	 var ser_loc = s_loc.substring(start_pos+1, end_pos);&#10;       	   	 var service_location = ser_loc.split(&quot; &quot;);&#10;       	   	 var service_lat = service_location[1];&#10;       	   	 var service_lon = service_location[0];&#10;       	   	 &#10;       	   	 var service_distance = result.results.bindings[k].distance_mi.value; &#10;       	   	 &#10;       	   	 //Ignore any schema.org prefixes&#10;       	   	 var service_type = result.results.bindings[k].type.value;&#10;       	   	 var tmp_s = service_type.split(&quot;schema.org/&quot;);&#10;       	   	 if(tmp_s.length &gt; 1){&#10;       	   	     	service_type = tmp_s[1];&#10;       	   	 }&#10;       	   	 &#10;       	   	 var address = '';&#10;       	   	 var price = 1.0;&#10;       	   	 var ratingScore = 0;&#10;       	   	 var accessor = &quot;ParkingComponent.js&quot;;&#10;       	   	 if(&quot;address&quot; in result.results.bindings[k]){&#10;       	   	    address = result.results.bindings[k].address.value;	&#10;       	   	 }&#10;       	   	 &#10;       	   	 if(&quot;price&quot; in result.results.bindings[k]){&#10;       	   	    price = result.results.bindings[k].price.value;	&#10;       	   	 }&#10;       	   	 &#10;       	   	 if(&quot;ratingScore&quot; in result.results.bindings[k]){&#10;       	   	    ratingScore = result.results.bindings[k].ratingScore.value;	&#10;       	   	 }&#10;       	   	 &#10;       	   	 if(&quot;accessor&quot; in result.results.bindings[k]){&#10;       	   	    accessor = result.results.bindings[k].accessor.value;	&#10;       	   	    accessor = accessor.split(&quot;dashboard/&quot;)[1];&#10;       	   	 }&#10;       	   	 &#10;       	   	 &#10;       	   	 var obj = {&#10;       	   	 	     'displayName': service_name,&#10;       	   	 	     'lat' : parseFloat(service_lat),&#10;       	   	 	     'lng' : parseFloat(service_lon),&#10;       	   	 	     'address': address,&#10;       	   	 	     'distance': Math.round(service_distance * 100) / 100, //in miles&#10;       	   	 	     'type': service_type,&#10;       	   	 	     'accessor': accessor,&#10;       	   	 	     'price': &quot;3.&quot; + Math.floor(Math.random()*10) + Math.floor(Math.random()*10), //parseFloat(Math.random().toFixed(2)),&#10;       	   	 	     'ratingScore': ratingScore&#10;       	   	 }&#10;       	   	 nearbyServices.push(obj);&#10;       	   }&#10;&#10;            //Only send if at least one location has been received so far&#10;            if(location){&#10;                update = {&#10;                    &quot;id&quot;: &quot;parkingDialogue&quot;,&#10;                    &quot;apiKey&quot;: resourceContents,&#10;                    &quot;mapPosition&quot;: location,&#10;                    &quot;parkingData&quot;: nearbyServices&#10;                };&#10;                self.send('response', update);&#10;            }&#10;&#10;&#10;        }&#10;    });&#10;};&#10;&#10;// var exampleData = [&#10;//             {&#10;//                 &quot;displayName&quot;: &quot;Parking1&quot; ,&#10;//                 &quot;lat&quot;: 37.8626,&#10;//                 &quot;lng&quot;: -122.2637,&#10;//                 &quot;address&quot;: &quot;1234 Place St.&quot;,&#10;//                 &quot;price&quot;: 3.12,&#10;//                 &quot;distance&quot;: 1.78,&#10;//             },&#10;//             {&#10;//                 &quot;displayName&quot;: &quot;Parking2&quot; ,&#10;//                 &quot;lat&quot;: 37.8731,&#10;//                 &quot;lng&quot;: -122.2617,&#10;//                 &quot;address&quot;: &quot;4321 Street Pl.&quot;,&#10;//                 &quot;price&quot;: 2.98,&#10;//                 &quot;distance&quot;: 1.96,&#10;//             },&#10;//                 {&#10;//                 &quot;displayName&quot;: &quot;Parking3&quot; ,&#10;//                 &quot;lat&quot;: 37.8831,&#10;//                 &quot;lng&quot;: -122.2517,&#10;//                 &quot;address&quot;: &quot;9273 Atom Rd.&quot;,&#10;//                 &quot;price&quot;: 3.01,&#10;//                 &quot;distance&quot;: 2.12,&#10;//             },&#10;//         ];">
                <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                    <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                    </property>
                </property>
            </property>
            <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
                </property>
                <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{425.0, 160.0}">
            </property>
            <property name="MapsAPIKeyLocation" class="ptolemy.data.expr.Parameter" value="MAPS_API_KEY_DONT_COMMIT.txt">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <port name="services" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
            <port name="latitude" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
            <port name="longitude" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
            <port name="response" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
        </entity>
        <entity name="QueryLauncher" class="ptolemy.actor.lib.jjs.JavaScript">
            <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
            </property>
            <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
            </property>
            <property name="script" class="ptolemy.actor.parameters.PortParameter" value="exports.setup = function(){&#10;    this.input(&quot;parkingMessage&quot;);&#10;    this.parameter('searchTerm', {&#10;        'type': 'string',&#10;        'value': 'parking',&#10;        'options': ['parking', 'trafficAlerts', 'drivingAssistance', 'restaurants', 'automotive']&#10;    });&#10;    this.output('latitude',{&#10;        'type': 'number'&#10;    });&#10;    this.output('longitude',{&#10;        'type': 'number'&#10;    });&#10;    this.output('queryTerm',{&#10;        'type': 'string'&#10;    });&#10;}&#10;&#10;exports.initialize = function(){&#10;    var thiz = this;&#10;    this.addInputHandler(&quot;parkingMessage&quot;, function(){&#10;        &#10;        //Center for map and query location (this example is the middle of Berkeley)&#10;        var location = {&#10;            &quot;lat&quot;: 37.8616,&#10;            &quot;lng&quot;: -122.2627,&#10;        }&#10;&#10;        thiz.send('latitude', location.lat);&#10;        thiz.send('longitude', location.lng);&#10;        thiz.send('queryTerm', thiz.getParameter('searchTerm'));&#10;    });&#10;}">
                <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                    <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                    </property>
                </property>
            </property>
            <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
                </property>
                <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[10.0, 275.0]">
            </property>
            <property name="searchTerm" class="ptolemy.data.expr.Parameter" value="parking">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <port name="parkingMessage" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
            <port name="latitude" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
            <port name="longitude" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
            <port name="queryTerm" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
        </entity>
        <entity name="queryServices" class="ptolemy.actor.lib.jjs.JavaScript">
            <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
            </property>
            <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
            </property>
            <property name="script" class="ptolemy.actor.parameters.PortParameter" value="&#10;exports.setup = function() {&#10;	this.input('latitude');&#10;	this.input('longitude');&#10;	this.input('queryTerm');&#10;	this.parameter('yelpResults',{&#10;		'type': 'boolean',&#10;		'value': false&#10;	});&#10;	this.output('updateYelpOnto');&#10;	this.output('query',{&#10;		'type': 'string'&#10;	});&#10;}&#10;&#10;exports.initialize = function() {&#10;	var self = this;&#10;	var start_time = Date.now().toString();&#10;	var current_time = start_time;&#10;	this.addInputHandler('queryTerm', function() {&#10;		var latitude = this.get('latitude');&#10;		var longitude = this.get('longitude');&#10;		var searchTerm = this.get('queryTerm');&#10;		&#10;		//Update Yelp Ontologies if enabled&#10;		if(self.getParameter('yelpResults')){&#10;				self.send('updateYelpOnto', '');	&#10;		}&#10;		&#10;		var queryPrefixString = &quot;PREFIX uom: &lt;http://www.opengis.net/def/uom/OGC/1.0/&gt;\n&quot;;&#10;		queryPrefixString += &quot;PREFIX geo: &lt;http://www.opengis.net/ont/geosparql#&gt;\n&quot;;&#10;		queryPrefixString += &quot;PREFIX geof: &lt;http://www.opengis.net/def/function/geosparql/&gt;\n&quot;;&#10;		queryPrefixString += &quot;PREFIX rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;\n&quot;;&#10;		queryPrefixString += &quot;PREFIX acc: &lt;http://ptolemy.berkeley.edu/accessors#&gt;\n&quot;;&#10;		queryPrefixString += &quot;PREFIX schema: &lt;http://schema.org/&gt;\n&quot;;&#10;		queryPrefixString += &quot;PREFIX sosa: &lt;http://www.w3.org/ns/sosa/&gt;\n&quot;;&#10;		&#10;		//Query Core ontology		&#10;	    var coreQueryString = &quot;SELECT ?type ?name ?address ?location ?price ?accessor ?distance_mi WHERE { ?name acc:hasService ?service . ?service geo:serviceType&quot;;&#10;	    coreQueryString+= &quot;?type . ?name acc:price ?price. ?name acc:serviceURI ?accessor. ?name acc:address ?address. ?name geo:location ?location.BIND&quot;;&#10;	    coreQueryString+= &quot;(geof:distance(?location, \'\'\'&lt;http://www.opengis.net/def/crs/OGC/1.3/CRS84&gt; Point (&quot;;&#10;        coreQueryString +=  longitude + &quot; &quot; + latitude + &quot;)\'\'\'^^geo:wktLiteral, uom:metre)/1609.344 AS ?distance_mi) . filter(str(?type)='&quot; + searchTerm + &quot;')}&quot;;&#10;		&#10;		//Query Yelp Ontology &#10;		//TODO: ASK for appropriate services if available&#10;		var yelpQueryString = &quot;&quot;;&#10;		current_time = Date.now().toString();&#10;		if(self.getParameter('yelpResults')){&#10;			yelpQueryString += &quot;select ?type ?name ?address ?location ?ratingScore  ?distance_mi where{ ?obs a sosa:Observation. ?obs schema:expires ?exp. ?obs sosa:resultTime ?time.&quot;;&#10;    		yelpQueryString += &quot;?obs sosa:hasResult ?businessNode. ?businessNode schema:name ?name. ?businessNode schema:address ?address. ?businessNode geo:asWKT ?location.&quot;;&#10;    		yelpQueryString += &quot;?businessNode rdf:type ?type. ?businessNode schema:aggregateRating ?aggRating. ?aggRating schema:ratingValue ?ratingScore. BIND&quot;;&#10;    		yelpQueryString += &quot;(geof:distance(?location,\'\'\'&lt;http://www.opengis.net/def/crs/OGC/1.3/CRS84&gt; Point(&quot; + longitude + &quot; &quot; + latitude + &quot;)\'\'\'^^geo:wktLiteral, uom:metre)/1609.344&quot;&#10;    		yelpQueryString += &quot; AS ?distance_mi) . filter (?ratingScore &gt; 3.5)}&quot;;&#10;			start_time = current_time;&#10;			//console.log(yelpQueryString);&#10;		}&#10;		&#10;		var combinedQuery = queryPrefixString;&#10;		combinedQuery += &quot;SELECT * WHERE { { &quot; + coreQueryString + &quot;} UNION {&quot; + yelpQueryString + &quot;} } ORDER BY ?distance_mi&quot;;&#10;		self.send('query', combinedQuery);&#10;		//console.log(combinedQuery);&#10;	});&#10;}">
                <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                    <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                    </property>
                </property>
            </property>
            <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
                </property>
                <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[295.0, 270.0]">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.EditorIcon">
                <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={0, 120, 934, 632}, maximized=false}">
                </property>
                <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 522]">
                </property>
                <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="4.0">
                </property>
                <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{0.0, 0.0}">
                </property>
                <property name="rectangle" class="ptolemy.vergil.kernel.attributes.RectangleAttribute">
                    <property name="_location" class="ptolemy.kernel.util.Location" value="[2.0, 1.0]">
                    </property>
                    <property name="width" class="ptolemy.data.expr.Parameter" value="60">
                    </property>
                    <property name="height" class="ptolemy.data.expr.Parameter" value="40">
                    </property>
                    <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                    </property>
                    <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                    </property>
                </property>
            </property>
            <property name="yelpResults" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <port name="error" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="false">
                </property>
            </port>
            <port name="script" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
            <port name="queryTerm" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
            <port name="latitude" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
            <port name="longitude" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
            <port name="updateYelpOnto" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
            <port name="query" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
        </entity>
        <entity name="SemanticYelpSearch" class="org.terraswarm.accessor.JSAccessor">
            <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
            </property>
            <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
            </property>
            <property name="script" class="ptolemy.actor.parameters.PortParameter" value="/** Perform a Yelp search for local businesses using the Yelp API&#10; *  https://www.yelp.com/developers/documentation/v3/business_search&#10; * &#10; *  The full Yelp API allows many parameters for searching for business.&#10; *  This accessor demonstrates a simple query for a particular type of&#10; *  business near specific geographic coordinates.&#10; *&#10; *  This accessor extends the YelpSearch accessor to produce a schema.org compatible&#10; *  Turtle ontology. Since schema.org is a linked data ontology, additional information&#10; *  about the ontology can be found by checking out the URIs in the output.&#10; *&#10; *  @accessor services/SemanticYelpSearch&#10; *  @author Matt Weber&#10; *  @version $$Id: SemanticYelpSearch.js 1725 2017-05-19 22:59:11Z cxh $$&#10; *  @input {string} searchTerm The variety of local business to search for (eg. &quot;Restaurants&quot;).&#10; *  @input {number} latitude First part of coordinates for local business search. Defaults to UC Berkeley's coordinates.&#10; *  @input {number} longitude Second part of coordinates for local business search. Defaults to UC Berkeley's coordinates.&#10; *  @input trigger An input to trigger the search.&#10; *  @parameter {string} APIKey An authentication token provided by Yelp for using&#10; *   their API. See https://www.yelp.com/developers/documentation/v3/authentication.&#10; *  @parameter {number} expirationPeriod The duration of time (in milliseconds) from receiving the Yelp response in this accessor &#10; *   after which the observation output on semanticObservation should no longer be considered accurate&#10; *   and is safe to remove from a semantic repository.&#10; *  @parameter {int} timeout The amount of time (in milliseconds) to wait for a response&#10; *   before triggering a null response and an error. This defaults to 5000.&#10; *  @output semanticObservation The YelpSearch results presented as a turtle ontology. &#10; */&#10;&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals addInputHandler, addInputParameter, console, error, exports, extend, input, get, getParameter, getResource, output, parameter, send */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10; &#10; /** Set up the accessor by defining the inputs and outputs.&#10; */&#10;&#10;var N3 = require('n3');&#10;var DataFactory = N3.DataFactory;&#10;var quad = DataFactory.quad;&#10;var literal = DataFactory.literal;&#10;var namedNode = DataFactory.namedNode;&#10;var store = N3.Store();&#10;&#10;exports.setup = function () {&#10;    this.extend('services/YelpSearch');&#10;    this.parameter('expirationPeriod', {&#10;        'type': 'number',&#10;        'value': 30000&#10;    });&#10;    this.output('response', {&#10;        'visibility': 'expert'&#10;    });&#10;    this.output('semanticObservation', {&#10;        'type': 'string'&#10;    });&#10;};&#10;&#10;exports.initialize = function() {&#10;    exports.ssuper.initialize.call(this);&#10;}&#10;&#10;//Overriding YelpSearch&#10;exports.handleResponse = function(message){&#10;    var thiz = this;&#10;&#10;    var writer = N3.Writer({ prefixes: { sosa: 'http://www.w3.org/ns/sosa/',&#10;                                        rdf: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',&#10;                                        xsd: 'http://www.w3.org/2001/XMLSchema#',&#10;                                        schema: 'http://schema.org/'&#10;                                        }&#10;                            });&#10;&#10;    //The N3 createBlankNode function helps to create blank node names that are unique for the N3 instance in this accessor.&#10;    //Other accessors producing ontologies for the same repository using different instances of N3&#10;    //will not necessarilly be unique. Fortunately, GraphDB creates new unique blank node names and by default&#10;    //scopes inserted blank nodes only within the file they are inserted from.&#10;    var obsNode = store.createBlankNode('SemanticYelpSearchObservation');&#10;    writer.addQuad(&#10;      obsNode,&#10;      namedNode('rdf:type'),&#10;      namedNode('sosa:Observation')&#10;    );&#10;    var date = new Date();&#10;    var formattedDate = date.toISOString();&#10;    writer.addQuad(&#10;      obsNode,&#10;      namedNode('sosa:resultTime'),&#10;      literal(formattedDate, namedNode('xsd:dateTime'))&#10;    );&#10;    &#10;    //Schema.org uses custom datatypes for their ontologies. I've converted them to xsd types here.&#10;    //This conversion is endorsed by the schema.org people themselves. See https://github.com/schemaorg/schemaorg/issues/1781&#10;    //In that same thread, there is a good argument for replacing all instances of schema:date with xsd:dateTime. I did it.&#10;    //Also, although I'm using schema:expires correctly here,&#10;    //all instances from schema.org use this to refer to published works.&#10;    var expirationDate = new Date(date.getTime() + thiz.getParameter('expirationPeriod'));&#10;    var formattedExpires = expirationDate.toISOString(); &#10;    writer.addQuad(&#10;      obsNode,&#10;      namedNode('schema:expires'),&#10;      //literal(formattedExpires, namedNode('schema:date'))&#10;      literal(formattedExpires, namedNode('xsd:dateTime'))&#10;    );&#10;&#10;    //Parse yelp's json response. Each business is a sosa:Result&#10;    if(message &amp;&amp; message.body){&#10;        var yelpData = JSON.parse(message.body);&#10;        if(yelpData &amp;&amp; yelpData.businesses){&#10;            for (var i = 0; i &lt; yelpData.businesses.length; i++) {&#10;                var business = yelpData.businesses[i];&#10;                var businessNode = store.createBlankNode('SemanticYelpSearchBusiness');&#10;                var ratingNode = store.createBlankNode('SemanticYelpSearchRating');&#10;&#10;                writer.addQuad(&#10;                  obsNode,&#10;                  namedNode('sosa:hasResult'),&#10;                  businessNode&#10;                );&#10;                writer.addQuad(&#10;                  businessNode,&#10;                  namedNode('rdf:type'),&#10;                  namedNode('schema:LocalBusiness')&#10;                );&#10;                writer.addQuad(&#10;                  businessNode,&#10;                  namedNode('schema:name'),&#10;                  //literal(business.name, namedNode('schema:text'))&#10;                  literal(business.name)&#10;                );&#10;                writer.addQuad(&#10;                  businessNode,&#10;                  namedNode('schema:telephone'),&#10;                  //literal(business.display_phone, namedNode('schema:text'))&#10;                  literal(business.display_phone)&#10;                );&#10;                if(business.location.display_address){&#10;                    writer.addQuad(&#10;                      businessNode,&#10;                      namedNode('schema:address'),&#10;                      //literal(business.location.display_address, namedNode('schema:text'))&#10;                      literal(business.location.display_address)&#10;                    );&#10;                }&#10;                //Order of a wkt CRS84 point is longitude, latitude&#10;                if(business.coordinates &amp;&amp; business.coordinates.latitude &amp;&amp; business.coordinates.longitude){&#10;                    writer.addQuad(&#10;                      businessNode,&#10;                      namedNode('http://www.opengis.net/ont/geosparql#asWKT'),&#10;                      literal('&lt;http://www.opengis.net/def/crs/OGC/1.3/CRS84&gt; Point(' + business.coordinates.longitude + ' ' + business.coordinates.latitude + ')', namedNode('http://www.opengis.net/ont/geosparql#wktLiteral'))&#10;                    );&#10;                }&#10;                writer.addQuad(&#10;                  businessNode,&#10;                  namedNode('schema:aggregateRating'),&#10;                  ratingNode&#10;                );&#10;                writer.addQuad(&#10;                  ratingNode,&#10;                  namedNode('rdf:type'),&#10;                  namedNode('schema:AggregateRating')&#10;                );&#10;                writer.addQuad(&#10;                  ratingNode,&#10;                  namedNode('schema:reviewCount'),&#10;                  //literal(business.review_count, namedNode('schema:Integer'))&#10;                  literal(business.review_count, namedNode('xsd:integer'))&#10;                );&#10;                writer.addQuad(&#10;                  ratingNode,&#10;                  namedNode('schema:ratingValue'),&#10;                  //literal(business.rating, namedNode('schema:Number'))&#10;                  literal(business.rating, namedNode('xsd:decimal'))&#10;                );&#10;            }&#10;        }&#10;    }&#10;&#10;    writer.end(function(error, result) { &#10;        thiz.send('semanticObservation', result);&#10;    });&#10;    exports.ssuper.handleResponse.call(this, message);&#10;}&#10;">
                <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                    <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                    </property>
                </property>
            </property>
            <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/services/SemanticYelpSearch.js">
            </property>
            <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
                <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Perform a Yelp search for local businesses using the Yelp API&#10; https://&lt;a href=&quot;http://www.yelp.com/developers/documentation/v3/business_search&quot;&gt;www.yelp.com/developers/documentation/v3/business_search&lt;/a&gt;&lt;/p&gt;&#10;&lt;p&gt; The full Yelp API allows many parameters for searching for business.&#10; This accessor demonstrates a simple query for a particular type of&#10; business near specific geographic coordinates.&lt;/p&gt;&#10;&lt;p&gt; This accessor extends the YelpSearch accessor to produce a schema.org compatible&#10; Turtle ontology. Since schema.org is a linked data ontology, additional information&#10; about the ontology can be found by checking out the URIs in the output.&lt;/p&gt;">
                </property>
                <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Matt Weber">
                </property>
                <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: SemanticYelpSearch.js 1725 2017-05-19 22:59:11Z cxh $$">
                </property>
                <property name="searchTerm (port)" class="ptolemy.kernel.util.StringAttribute" value="The variety of local business to search for (eg. &quot;Restaurants&quot;).">
                </property>
                <property name="latitude (port)" class="ptolemy.kernel.util.StringAttribute" value="First part of coordinates for local business search. Defaults to UC Berkeley's coordinates.">
                </property>
                <property name="longitude (port)" class="ptolemy.kernel.util.StringAttribute" value="Second part of coordinates for local business search. Defaults to UC Berkeley's coordinates.">
                </property>
                <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="An input to trigger the search.">
                </property>
                <property name="semanticObservation (port)" class="ptolemy.kernel.util.StringAttribute" value="The YelpSearch results presented as a turtle ontology.">
                </property>
                <property name="APIKey (parameter)" class="ptolemy.kernel.util.StringAttribute" value="An authentication token provided by Yelp for using&#10;  their API. See https://www.yelp.com/developers/documentation/v3/authentication.">
                </property>
                <property name="expirationPeriod (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The duration of time (in milliseconds) from receiving the Yelp response in this accessor &#10;  after which the observation output on semanticObservation should no longer be considered accurate&#10;  and is safe to remove from a semantic repository.">
                </property>
                <property name="timeout (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The amount of time (in milliseconds) to wait for a response&#10;  before triggering a null response and an error. This defaults to 5000.">
                </property>
            </property>
            <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
                </property>
                <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
                </property>
            </property>
            <property name="options" class="ptolemy.actor.parameters.PortParameter" value="">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="command" class="ptolemy.actor.parameters.PortParameter" value="">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="arguments" class="ptolemy.actor.parameters.PortParameter" value="">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="searchTerm" class="ptolemy.actor.parameters.PortParameter" value="">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="APIKey" class="ptolemy.data.expr.Parameter" value="">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[330.0, -5.0]">
            </property>
            <property name="latitude" class="ptolemy.actor.parameters.PortParameter" value="">
            </property>
            <property name="longitude" class="ptolemy.actor.parameters.PortParameter" value="">
            </property>
            <port name="options" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </port>
            <port name="command" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
            </port>
            <port name="arguments" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </port>
            <port name="searchTerm" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
            </port>
            <port name="latitude" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
            </port>
            <port name="longitude" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
            </port>
            <port name="trigger" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
            <port name="body" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
            <port name="response" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
            <port name="status" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
            <port name="headers" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
            <port name="semanticObservation" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
        </entity>
        <entity name="SemanticRepositoryUpdate" class="org.terraswarm.accessor.JSAccessor">
            <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
            </property>
            <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
            </property>
            <property name="script" class="ptolemy.actor.parameters.PortParameter" value="/** Perform a SPARQL update on a semantic repository such as GraphDB.&#10; * &#10; *  SPARQL is a W3C standard for querying semantic repositories,&#10; *  playing an analogous role to SQL with respect to relational&#10; *  databases. Semantic repositories fall within the domain of knowledge&#10; *  representation in AI and typically are implemented as a triplestore:&#10; *  entries in the repository have the form &quot;subject&quot;, &quot;predicate&quot;, &quot;object&quot;&#10; *  eg. &quot;An Apple&quot; &quot;IsA&quot; &quot;Fruit&quot;&#10; *  &#10; *  An example SPARQL update to add a triple to the repository:&#10; *&#10; *  INSERT DATA {&#10; *      &lt;http://ptolemy.berkeley.edu/a&gt; &lt;http://ptolemy.berkeley.edu/b&gt; &lt;http://ptolemy.berkeley.edu/c&gt; .&#10; *  }&#10; *&#10; *  Documentation for SPARQL and the SPARQL Protocol 1.1 introducing updates can be found at&#10; *  https://www.w3.org/TR/sparql11-query/&#10; *&#10; *  Information on GraphDB can be found at&#10; *  http://graphdb.ontotext.com/&#10; *  &#10; *  SPARQL is also a protocol for communicating with RDF databases&#10; *  Upon receiving an update input, this accessor performs an http POST&#10; *  to the specified server and port with the body set to the&#10; *  update input. The http status code is produced on the output with&#10; *  a 204 response from the server indicating success.&#10; *  If a different status code is received, this accessor throws an error. &#10; *  Note that an INSERT that inserts data already in the repository or&#10; *  a DELETE that removes data already absent from the &#10; *  repository is treated by the respository as a&#10; *  successful update.&#10; *&#10; *  This accessor does not block waiting for the response, but if any additional&#10; *  *update* input is received before a pending request has received a response&#10; *  or timed out, then the new request will be queued and sent out only after&#10; *  the pending request has completed. This strategy ensures that outputs are&#10; *  produced in the same order as the input requests.&#10; *&#10; *  @accessor services/SemanticRepositoryUpdate&#10; *  @author Matt Weber&#10; *  @version $$Id: SemanticRepository.js 1725 2017-05-19 22:59:11Z cxh $$&#10; *  @input {string} update The update to be sent to the semantic repository.&#10; *   Types of SPARQL updates are: INSERT and DELETE, but raw ontology data is accepted too with appropriate format.&#10; *  @parameter {string} format The format of data sent to the ontology. Currently only supports data types from&#10; *   http://docs.rdf4j.org/rest-api/#_content_types.&#10; *  @parameter {string} host The URL for the semantic repository.&#10; *  @parameter {string} port The port for the semantic repository.&#10; *  @parameter {string} repositoryName The name of the particular repository on the host.&#10; *  @parameter {boolean} authenticate If true, enable authentication to an access controlled&#10; *   semantic repository by sending username and password with request. If false, username &#10; *   and password information will not be sent. An error will occur if the http protocol is&#10; *   selected with a true authenticate setting to avoid sending username/password information&#10; *   in plain text.&#10; *  @parameter {string} username A username for an access controlled semantic repository. &#10; *  @parameter {string} password A password for an access controlled semantic repository.&#10; *  @parameter {int} timeout The amount of time (in milliseconds) to wait for a response&#10; *   before triggering a null response and an error. This defaults to 20000.&#10; *  @output {string} status The status code of the http POST to the Semantic Repository.&#10; *   A 204 code indicates success.&#10; */&#10;&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals addInputHandler, addInputParameter, console, error, exports, extend, input, get, getParameter, getResource, output, parameter, send */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;var base64 = require('base64-js');&#10; /** Set up the accessor by defining the inputs and outputs.&#10; */&#10;exports.setup = function () {&#10;    this.extend('net/REST');&#10;    this.input('update', {&#10;        'type': 'string'&#10;    });&#10;&#10;    this.parameter('protocol', {&#10;        'type': 'string',&#10;        'value': 'http',&#10;        'options': ['http', 'https']&#10;    });&#10;&#10;    this.parameter('host', {&#10;        'type': 'string',&#10;        'value': 'localhost'&#10;    });&#10;&#10;    this.parameter('port', {&#10;        'type': 'int',&#10;        'value': 7200&#10;    });&#10;&#10;    this.parameter('repositoryName', {&#10;        'type': 'string',&#10;    });&#10;&#10;    this.parameter('authenticate', {&#10;        'type': 'boolean',&#10;        'value': false&#10;    });&#10;&#10;    this.parameter('username', {&#10;        'type': 'string',&#10;        'value': 'admin'&#10;    });&#10;&#10;    this.parameter('password', {&#10;        'type': 'string',&#10;        'value': 'root'&#10;    });&#10;&#10;    //Overriding inherited default timeout value of 5000ms to allow for longer queries by default&#10;    this.parameter('timeout', {&#10;        'type': 'int',&#10;        'value': 20000&#10;    });&#10;&#10;    this.parameter('format', {&#10;        'type': 'string',&#10;        'value': 'SPARQL',&#10;        'options': [ 'SPARQL', 'RDF/XML', 'N-Triples', 'Turtle', 'N3', 'N-Quads', &#10;            'JSON-LD', 'RDF/JSON', 'TriX', 'TriG', 'Sesame Binary RDF'&#10;        ]&#10;    });&#10;&#10;    //Use the response output from the REST accessor&#10;&#10;&#10;    // Change default values of the base class inputs.&#10;    // Also, hide base class inputs, except trigger.&#10;    this.input('options', {&#10;        'visibility': 'expert',&#10;    });&#10;    this.input('command', {&#10;        'visibility': 'expert',&#10;    });&#10;    this.input('arguments', {&#10;        'visibility': 'expert',&#10;    });&#10;    this.input('body', {&#10;        'visibility': 'expert'&#10;    });&#10;    this.input('trigger', {&#10;        'visibility': 'expert'&#10;    });&#10;    this.output('headers', {&#10;        'visibility': 'expert'&#10;    });&#10;    this.output('response', {&#10;        'visibility': 'expert'&#10;    });&#10;    this.parameter('outputCompleteResponseOnly', {&#10;        'visibility': 'expert'&#10;    });&#10;};&#10;&#10;//Overriding REST&#10;exports.filterResponse = function(response){&#10;    return JSON.parse(response);&#10;};&#10;&#10;//Overriding REST&#10;//Connections to the SemanticRepository should be closed once data has been received.&#10;exports.handleResponse = function(message){&#10;    this.send('status', message.statusCode);&#10;    exports.ssuper.wrapup();&#10;    if(message.statusCode != 204){&#10;        error('Received a ' + message.statusCode + ' status code from the Semantic Repository. 204 indicates success.');&#10;    }&#10;};&#10;&#10;exports.initialize = function(){&#10;    exports.ssuper.initialize.call(this);&#10;&#10;    //Check for bad authentication and protocol settings at initialization.&#10;    if(this.getParameter('protocol') == 'http' &amp;&amp; this.getParameter('authenticate') ){&#10;        error(&quot;Semantic Repository authentication setting incompatible with protocol setting. This accessor will not send username and password information in plain text over http. Change to https or dissable authentication.&quot;);&#10;    }&#10;&#10;    var thiz = this;&#10;&#10;    this.addInputHandler('update', function(){&#10;&#10;        //Check for bad authentication and protocol settings when preparing to send.&#10;        if(thiz.getParameter('protocol') == 'http' &amp;&amp; thiz.getParameter('authenticate') ){&#10;            error(&quot;Semantic Repository authentication setting incompatible with protocol setting. This accessor will not send username and password information in plain text over http. Change to https or dissable authentication.&quot;);&#10;            return;&#10;        }&#10;&#10;        var updateInput = thiz.get('update');&#10;        var host = thiz.getParameter('host');&#10;        var port = thiz.getParameter('port');&#10;        var repositoryName = thiz.getParameter('repositoryName');&#10;        var format = thiz.getParameter('format');&#10;        var authenticate = thiz.getParameter('authenticate');&#10;        var protocol = thiz.getParameter('protocol');&#10;&#10;        //The Semantic Repository GraphDB uses the RDF4j Server Rest API for these updates.&#10;        //This table of content types to MIME types is taken (with the adddition of 'SPARQL') from &#10;        //http://docs.rdf4j.org/rest-api/#_content_types&#10;        var formatToMIME = { 'SPARQL' : 'application/sparql-update',&#10;                            'RDF/XML' : 'application/rdf+xml',&#10;                            'N-Triples' : 'text/plain',&#10;                            'Turtle' : 'text/turtle',&#10;                            'N3' : 'text/rdf+n3',&#10;                            'N-Quads' : 'text/x-nquads',&#10;                            'JSON-LD' : 'application/ld+json',&#10;                            'RDF/JSON' : 'application/rdf+json',&#10;                            'TriX' : 'application/trix',&#10;                            'TriG' : 'application/x-trig',&#10;                            'Sesame Binary RDF' : 'application/x-binary-rdf'&#10;                             };&#10;&#10;        if(formatToMIME[format] === undefined){&#10;            error('The format parameter is set to ' + format + '. This is not a supported format.');&#10;        }&#10;&#10;        var options = {&#10;            'headers' : {'Content-Type': formatToMIME[format]},&#10;            'method'  : 'POST',&#10;            'url'     : {'host'  : host,&#10;                        'port'   : port,&#10;                        'protocol' : protocol&#10;                        }&#10;        };&#10;&#10;        //If authenticating, add base64 encoded username and password to headers.&#10;        //See basic authentication under http://graphdb.ontotext.com/documentation/standard/authentication.html&#10;        if(authenticate &amp;&amp; protocol == 'https'){&#10;            var username = thiz.getParameter('username');&#10;            var password = thiz.getParameter('password');&#10;&#10;            //Note, contrary to the graphDB documentation, the separator between&#10;            //username and password is a colon, not a forward slash.&#10;            var login = username +&quot;:&quot; + password;&#10;            var loginArray = login.split(&quot;&quot;);&#10;            var loginNumeric = loginArray.map(function(x){ return x.charCodeAt(0)});&#10;            var loginUint = new Uint8Array(loginNumeric);&#10;            var login64 = base64.fromByteArray(loginUint);&#10;            options.headers.Authorization =  'Basic ' + login64;&#10;        }&#10;&#10;        var command = 'repositories/' + repositoryName + '/statements';&#10;&#10;        var body = updateInput;&#10;&#10;        thiz.send('options', options);&#10;        thiz.send('command', command);&#10;        thiz.send('body', body);&#10;        thiz.send('trigger', true);&#10;    });&#10;};&#10;">
                <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                    <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                    </property>
                </property>
            </property>
            <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/services/SemanticRepositoryUpdate.js">
            </property>
            <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
                <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Perform a SPARQL update on a semantic repository such as GraphDB.&lt;/p&gt;&#10;&lt;p&gt; SPARQL is a W3C standard for querying semantic repositories,&#10; playing an analogous role to SQL with respect to relational&#10; databases. Semantic repositories fall within the domain of knowledge&#10; representation in AI and typically are implemented as a triplestore:&#10; entries in the repository have the form &amp;quot;subject&amp;quot;, &amp;quot;predicate&amp;quot;, &amp;quot;object&amp;quot;&#10; eg. &amp;quot;An Apple&amp;quot; &amp;quot;IsA&amp;quot; &amp;quot;Fruit&amp;quot;&lt;/p&gt;&#10;&lt;p&gt; An example SPARQL update to add a triple to the repository:&lt;/p&gt;&#10;&lt;p&gt; INSERT DATA {&#10;     &lt;a href=&quot;http://ptolemy.berkeley.edu/a&quot;&gt;http://ptolemy.berkeley.edu/a&lt;/a&gt; &lt;a href=&quot;http://ptolemy.berkeley.edu/b&quot;&gt;http://ptolemy.berkeley.edu/b&lt;/a&gt; &lt;a href=&quot;http://ptolemy.berkeley.edu/c&quot;&gt;http://ptolemy.berkeley.edu/c&lt;/a&gt; .&#10; }&lt;/p&gt;&#10;&lt;p&gt; Documentation for SPARQL and the SPARQL Protocol 1.1 introducing updates can be found at&#10; https://&lt;a href=&quot;http://www.w3.org/TR/sparql11-query/&quot;&gt;www.w3.org/TR/sparql11-query/&lt;/a&gt;&lt;/p&gt;&#10;&lt;p&gt; Information on GraphDB can be found at&#10; http://graphdb.ontotext.com/&lt;/p&gt;&#10;&lt;p&gt; SPARQL is also a protocol for communicating with RDF databases&#10; Upon receiving an update input, this accessor performs an http POST&#10; to the specified server and port with the body set to the&#10; update input. The http status code is produced on the output with&#10; a 204 response from the server indicating success.&#10; If a different status code is received, this accessor throws an error. &#10; Note that an INSERT that inserts data already in the repository or&#10; a DELETE that removes data already absent from the &#10; repository is treated by the respository as a&#10; successful update.&lt;/p&gt;&#10;&lt;p&gt; This accessor does not block waiting for the response, but if any additional&#10; &lt;em&gt;update&lt;/em&gt; input is received before a pending request has received a response&#10; or timed out, then the new request will be queued and sent out only after&#10; the pending request has completed. This strategy ensures that outputs are&#10; produced in the same order as the input requests.&lt;/p&gt;">
                </property>
                <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Matt Weber">
                </property>
                <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: SemanticRepository.js 1725 2017-05-19 22:59:11Z cxh $$">
                </property>
                <property name="update (port)" class="ptolemy.kernel.util.StringAttribute" value="The update to be sent to the semantic repository.&#10;  Types of SPARQL updates are: INSERT and DELETE, but raw ontology data is accepted too with appropriate format.">
                </property>
                <property name="status (port)" class="ptolemy.kernel.util.StringAttribute" value="The status code of the http POST to the Semantic Repository.&#10;  A 204 code indicates success.">
                </property>
                <property name="format (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The format of data sent to the ontology. Currently only supports data types from&#10;  http://docs.rdf4j.org/rest-api/#_content_types.">
                </property>
                <property name="host (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The URL for the semantic repository.">
                </property>
                <property name="port (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The port for the semantic repository.">
                </property>
                <property name="repositoryName (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The name of the particular repository on the host.">
                </property>
                <property name="authenticate (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If true, enable authentication to an access controlled&#10;  semantic repository by sending username and password with request. If false, username &#10;  and password information will not be sent. An error will occur if the http protocol is&#10;  selected with a true authenticate setting to avoid sending username/password information&#10;  in plain text.">
                </property>
                <property name="username (parameter)" class="ptolemy.kernel.util.StringAttribute" value="A username for an access controlled semantic repository.">
                </property>
                <property name="password (parameter)" class="ptolemy.kernel.util.StringAttribute" value="A password for an access controlled semantic repository.">
                </property>
                <property name="timeout (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The amount of time (in milliseconds) to wait for a response&#10;  before triggering a null response and an error. This defaults to 20000.">
                </property>
            </property>
            <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
                </property>
                <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
                </property>
            </property>
            <property name="options" class="ptolemy.actor.parameters.PortParameter" value="">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="command" class="ptolemy.actor.parameters.PortParameter" value="">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="arguments" class="ptolemy.actor.parameters.PortParameter" value="">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="protocol" class="ptolemy.data.expr.Parameter" value="https">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="host" class="ptolemy.data.expr.Parameter" value="localhost">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="repositoryName" class="ptolemy.data.expr.Parameter" value="AutomotiveServices">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="username" class="ptolemy.data.expr.Parameter" value="admin">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="password" class="ptolemy.data.expr.Parameter" value="root">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="format" class="ptolemy.data.expr.Parameter" value="Turtle">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[535.0, -5.0]">
            </property>
            <property name="authenticate" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <property name="_localChanges" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="timeout" class="ptolemy.data.expr.Parameter" value="200000">
            </property>
            <port name="options" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </port>
            <port name="command" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
            </port>
            <port name="arguments" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </port>
            <port name="trigger" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
            <port name="body" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
            <port name="response" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
            <port name="status" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
            <port name="headers" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
            <port name="update" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
        </entity>
        <entity name="updateDisplay" class="ptolemy.actor.lib.gui.Display">
            <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={756, 664, 499, 208}, maximized=false}">
            </property>
            <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[499, 164]">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[725.0, -5.0]">
            </property>
        </entity>
        <entity name="TestSpontaneousOnce" class="org.terraswarm.accessor.JSAccessor">
            <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
            </property>
            <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
            </property>
            <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Test accessor that spontaneously produces outputs once.&#10;//&#10;// Copyright (c) 2016-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** Test accessor that spontaneously produces outputs once per time interval.&#10; *  This implementation produces a counting sequence.&#10; *&#10; *  @accessor test/TestSpontaneousOnce&#10; *  @parameter delay The delay in milliseconds before the value is outputk.&#10; *  @parameter value The value to be output after the delay.&#10; *  @output output The output port&#10; *  @author Christopher Brooks and Edward A. Lee. Based on TestSpontaneous by Edward A. Lee&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals clearTimeout, console, error, exports, require, setTimeout */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;exports.setup = function () {&#10;    this.parameter('delay', {&#10;        'type': 'number',&#10;        'value': 1000&#10;    });&#10;    this.parameter('value', {&#10;        'value': true&#10;    }); &#10;    this.output('output');&#10;};&#10;&#10;// These variables will not be visible to subclasses.&#10;var handle = null;&#10;&#10;exports.initialize = function () {&#10;    // Need to record 'this' for use in the callback.&#10;    var thiz = this;&#10;    handle = setTimeout(function () {&#10;        thiz.send('output', thiz.getParameter('value'));&#10;    }, this.getParameter('delay'));&#10;};&#10;&#10;exports.wrapup = function () {&#10;    if (handle) {&#10;        clearTimeout(handle);&#10;        handle = null;&#10;    }&#10;};&#10;">
                <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                    <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                    </property>
                </property>
            </property>
            <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/test/TestSpontaneousOnce.js">
            </property>
            <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
                <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Test accessor that spontaneously produces outputs once per time interval.&#10; This implementation produces a counting sequence.&lt;/p&gt;">
                </property>
                <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Christopher Brooks and Edward A. Lee. Based on TestSpontaneous by Edward A. Lee">
                </property>
                <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
                </property>
                <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="The output port">
                </property>
                <property name="delay (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The delay in milliseconds before the value is outputk.">
                </property>
                <property name="value (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The value to be output after the delay.">
                </property>
            </property>
            <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
                </property>
                <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[65.0, 15.0]">
            </property>
            <property name="delay" class="ptolemy.data.expr.Parameter" value="4000.0">
            </property>
            <port name="output" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
        </entity>
        <relation name="relation9" class="ptolemy.actor.TypedIORelation">
            <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
            </property>
            <vertex name="vertex1" value="[365.0, 110.0]">
            </vertex>
        </relation>
        <relation name="relation2" class="ptolemy.actor.TypedIORelation">
            <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
            </property>
            <vertex name="vertex1" value="[205.0, 160.0]">
            </vertex>
        </relation>
        <relation name="relation7" class="ptolemy.actor.TypedIORelation">
            <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
            </property>
            <vertex name="vertex1" value="[245.0, 170.0]">
            </vertex>
        </relation>
        <relation name="relation3" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation" class="ptolemy.actor.TypedIORelation">
            <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
            </property>
            <vertex name="vertex1" value="[585.0, 160.0]">
            </vertex>
        </relation>
        <relation name="relation4" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation6" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation8" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation11" class="ptolemy.actor.TypedIORelation">
            <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
            </property>
            <vertex name="vertex1" value="{200.0, 100.0}">
            </vertex>
        </relation>
        <link port="parkingMessage" relation="relation3"/>
        <link port="response" relation="relation"/>
        <link port="SemanticRepositoryQuery.response" relation="relation9"/>
        <link port="SemanticRepositoryQuery.query" relation="relation4"/>
        <link port="Display.input" relation="relation"/>
        <link port="ResponseGenerator.services" relation="relation9"/>
        <link port="ResponseGenerator.latitude" relation="relation2"/>
        <link port="ResponseGenerator.longitude" relation="relation7"/>
        <link port="ResponseGenerator.response" relation="relation"/>
        <link port="QueryLauncher.parkingMessage" relation="relation3"/>
        <link port="QueryLauncher.latitude" relation="relation2"/>
        <link port="QueryLauncher.longitude" relation="relation7"/>
        <link port="QueryLauncher.queryTerm" relation="relation11"/>
        <link port="queryServices.queryTerm" relation="relation11"/>
        <link port="queryServices.latitude" relation="relation2"/>
        <link port="queryServices.longitude" relation="relation7"/>
        <link port="queryServices.query" relation="relation4"/>
        <link port="SemanticYelpSearch.searchTerm" relation="relation11"/>
        <link port="SemanticYelpSearch.latitude" relation="relation2"/>
        <link port="SemanticYelpSearch.longitude" relation="relation7"/>
        <link port="SemanticYelpSearch.semanticObservation" relation="relation6"/>
        <link port="SemanticRepositoryUpdate.status" relation="relation8"/>
        <link port="SemanticRepositoryUpdate.update" relation="relation6"/>
        <link port="updateDisplay.input" relation="relation8"/>
    </entity>
    <entity name="Display2" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={325, 235, 499, 208}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[499, 164]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-165.0, 290.0]">
        </property>
    </entity>
    <entity name="Router" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="exports.setup = function(){&#10;    this.input(&quot;userCommand&quot;);&#10;    this.output(&quot;dashboard&quot;); //triggers default components&#10;    this.output(&quot;parkingDialogue&quot;); //triggers parking dialogue&#10;    this.output(&quot;selectAccessor&quot;,&#10;        {'type': 'string'}&#10;    ); //Path to user selected accessor&#10;    this.output(&quot;parkingComponent&quot;); //communication from the parking&#10;};&#10;&#10;exports.initialize = function(){&#10;    this.addInputHandler(&quot;userCommand&quot;, function(){&#10;        var command = this.get('userCommand');&#10;        if(command &amp;&amp; command.message){&#10;            var msg = JSON.parse(command.message);&#10;            if(msg.id){&#10;                switch(msg.id){&#10;                    case &quot;parkingDialogue&quot;:&#10;                        this.send(&quot;parkingDialogue&quot;, command);&#10;                        break;&#10;                    case &quot;system&quot;:&#10;                        if(msg.msg &amp;&amp; msg.msg == &quot;dashboard&quot;)&#10;                            this.send(&quot;dashboard&quot;, command);&#10;                        break;&#10;                    case &quot;parkingComponent&quot;:&#10;                        this.send(&quot;parkingComponent&quot;, command);&#10;                        break;&#10;                        //FIXME: I'm having this send the value instead of the command&#10;                        //just to save time for the paper deadline. This is inconsistent with how the&#10;                        //other ports work&#10;                    case &quot;selectAccessor&quot;:&#10;                        if(msg.accessorPath){&#10;                            this.send(&quot;selectAccessor&quot;, msg.accessorPath);&#10;                        }&#10;                        break;&#10;                    default:&#10;                        error(&quot;Received message in router with an invalid ID&quot;);&#10;                } &#10;            } else {&#10;                error(&quot;Unable to parse ID out of message. Got ID: &quot; + msg.id);&#10;            }&#10;        } else {&#10;            error(&quot;Received message in router and was unable to identify ID&quot;);&#10;        }&#10;    });&#10;};">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-330.0, 210.0]">
        </property>
        <port name="userCommand" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="dashboard" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="parkingDialogue" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="selectAccessor" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="parkingComponent" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="ParameterizedParallelMutable" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Put your JavaScript program here.&#10;// Refer to parameters in scope using dollar-sign{parameterName}.&#10;// See: https://wiki.eecs.berkeley.edu/accessors/Version1/AccessorSpecification&#10;&#10;exports.setup = function() {&#10;    // this.extend('utilities/MutableBase');&#10;    this.implement('dashboard/UIComponent');&#10;	&#10;	this.input('accessorsList', {&#10;		'type': 'general'&#10;	});&#10;&#10;    this.parameter('numberOfMutable', {&#10;        'type': 'number',&#10;        'value': 6&#10;    });&#10;};&#10;&#10;var currentNumberOfMutables = 0;&#10;&#10;exports.initialize = function() {&#10;    var thiz = this;&#10;    &#10;    // createMutables.bind(thiz);&#10;    var numberOfMutables = this.getParameter('numberOfMutable');&#10;	&#10;	for (i = 0 ; i &lt; numberOfMutables ; i++) {&#10;    	var mutable = thiz.instantiate('Mut'+i, 'dashboard/UIComponentMutable');&#10;    	thiz.connect('userInput', mutable, 'userInput');&#10;    	thiz.connect(mutable, 'componentUpdate', 'componentUpdate');&#10;    }&#10;    this.assignPriorities();&#10;        &#10;    this.addInputHandler('accessorsList', function() {&#10;    	if (currentNumberOfMutables &lt; numberOfMutables) {&#10;    		var accessor = this.get('accessorsList');&#10;    		console.log('dfsgvb '+accessor);&#10;    		console.log('containes accessors are: '+thiz.containedAccessors);&#10;    		thiz.containedAccessors[currentNumberOfMutables].reify(accessor);&#10;    		thiz.containedAccessors[currentNumberOfMutables].initialize();&#10;    		currentNumberOfMutables++;&#10;    	}&#10;    });&#10;};&#10;&#10;var createMutables = function() {&#10;	&#10;	&#10;}&#10;    &#10;  ">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[385.0, 275.0]">
        </property>
        <property name="componentID" class="ptolemy.data.expr.Parameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="userInput" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="componentUpdate" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="accessorsList" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
    </entity>
    <entity name="AccessorResourcesList" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Put your JavaScript program here.&#10;// Refer to parameters in scope using dollar-sign{parameterName}.&#10;// See: https://wiki.eecs.berkeley.edu/accessors/Version1/AccessorSpecification&#10;&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[645.0, 395.0]">
        </property>
    </entity>
    <entity name="ConfiguredParkingMutable" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="exports.setup = function() {&#10;    this.extend('utilities/MutableBase');&#10;    this.implement('dashboard/UIComponent');&#10;};">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[350.0, 615.0]">
        </property>
        <property name="componentID" class="ptolemy.data.expr.Parameter" value="parkingComponent">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="accessor" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="state" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="userInput" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="componentUpdate" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="Display3" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={687, 124, 535, 527}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[535, 476]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{380, 155}">
        </property>
    </entity>
    <entity name="Display4" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={687, 280, 535, 527}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[535, 476]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[490.0, 150.0]">
        </property>
    </entity>
    <relation name="relation8" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[20.0, 145.0]">
        </vertex>
    </relation>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[245.0, 85.0]">
        </vertex>
    </relation>
    <relation name="relation11" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[625.0, 260.0]">
        </vertex>
    </relation>
    <relation name="relation19" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[450.0, 275.0]">
        </vertex>
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[310.0, 285.0]">
        </vertex>
    </relation>
    <relation name="relation16" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[-260.0, 290.0]">
        </vertex>
    </relation>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
        <vertex name="vertex1" value="[500.0, 730.0]">
        </vertex>
    </relation>
    <link port="GetResource.trigger" relation="relation8"/>
    <link port="GetResource.output" relation="relation2"/>
    <link port="Merge.input" relation="relation19"/>
    <link port="Merge.input" relation="relation6"/>
    <link port="Merge.output" relation="relation11"/>
    <link port="GetResource2.output" relation="relation2"/>
    <link port="GetResource3.output" relation="relation2"/>
    <link port="GetResource4.output" relation="relation2"/>
    <link port="Display.input" relation="relation5"/>
    <link port="RoutingWebSocketServer.received" relation="relation5"/>
    <link port="RoutingWebSocketServer.routingSend" relation="relation11"/>
    <link port="GetResource5.trigger" relation="relation8"/>
    <link port="GetResource5.output" relation="relation2"/>
    <link port="ParameterizedBlockingGetResource.trigger" relation="relation8"/>
    <link port="ParameterizedBlockingGetResource.output" relation="relation"/>
    <link port="ParkingDialogue.parkingMessage" relation="relation4"/>
    <link port="ParkingDialogue.response" relation="relation6"/>
    <link port="Display2.input" relation="relation4"/>
    <link port="Router.userCommand" relation="relation5"/>
    <link port="Router.dashboard" relation="relation8"/>
    <link port="Router.selectAccessor" relation="relation4"/>
    <link port="Router.parkingComponent" relation="relation16"/>
    <link port="ParameterizedParallelMutable.componentUpdate" relation="relation19"/>
    <link port="ParameterizedParallelMutable.accessorsList" relation="relation2"/>
    <link port="ConfiguredParkingMutable.accessor" relation="relation"/>
    <link port="ConfiguredParkingMutable.userInput" relation="relation16"/>
    <link port="ConfiguredParkingMutable.componentUpdate" relation="relation19"/>
    <link port="Display3.input" relation="relation2"/>
    <link port="Display4.input" relation="relation19"/>
</entity>
